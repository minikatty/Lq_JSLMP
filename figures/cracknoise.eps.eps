%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: cracknoise.eps-28347.pdf
%%Creator: Adobe Acrobat 22.1.0
%%For: ZhouLei
%%CreationDate: 2023/3/23, 16:38:47
%%BoundingBox: 0 0 581 245
%%HiResBoundingBox: 0 0 580.4488 244.6614
%%CropBox: 0 0 580.4488 244.6614
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1064 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.55.0"
   xmp:ModifyDate="2023-03-23T16:38:34+08:00"
   xmp:CreateDate="2023-03-23T16:37:53+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.10.0.1602886 \(R2021a\). Operating System: Windows 10)"
   xmp:MetadataDate="2023-03-23T16:38:34+08:00"
   xmpMM:DocumentID="uuid:807c68d6-cbb1-11ed-0000-d1551cc4f631"
   xmpMM:InstanceID="uuid:59a47d38-e381-4133-a003-64db321a8408"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:/Users/ZhouLei/Desktop/cracknoise.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -244.661 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 244.661 li
580.449 244.661 li
580.449 0 li
cp
clp
gsave
-51.0236 247.496 mo
639.976 247.496 li
639.976 -8.50394 li
-51.0236 -8.50394 li
cp
clp
-51.0236 247.496 mo
640.259 247.496 li
640.259 -8.36134 li
-51.0236 -8.36134 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
-51.0236 247.496 mo
640.259 247.496 li
640.259 -8.36133 li
-51.0236 -8.36133 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
41.5475 214.011 mo
577.26 214.011 li
577.26 5.37627 li
41.5475 5.37627 li
cp
f
41.5475 214.011 mo
577.26 214.011 li
1 /0 /CSD get_res sepcs
.851074 sep
5.00561 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 5.37585 mo
577.26 5.37585 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 214.011 mo
41.5475 208.645 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
255.833 214.011 mo
255.833 208.645 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
470.118 214.011 mo
470.118 208.645 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 5.37585 mo
41.5475 10.7423 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
255.833 5.37585 mo
255.833 10.7423 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
470.118 5.37585 mo
470.118 10.7423 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 84 /T put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 115 /s put
def
/UniqueID 5020902 def
/FontBBox {0 -218 762 729} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 -0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/parenleft <1C60D8A8C9B81F2C34BC1722FEFB37BB58C35B527AE6A09491FA
40D7E8E5CDDF40B1FA04CF4C0C7382C2F861C47E3D9F31951A352479B61220DA
E3010153555D> |-
/parenright <1C60D8A8C9B81F2C34BC1722DDC8F1B2A5255D3125BF196E18C
C504ED91C8305BA71730C40B22B521DE97A022B4A559586A56D21ED89F0FFA70
036F1C6B28C3F> |-
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/T <1C60D8A8C9B7D8BE6A40C97BBF661CB0B8222F950E511FEAA4C1C13E5F94
78F30E1367384EBB0E379956ACFD> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/m <1C60D8A8C9B6B41CC78139463B68644DCA5BB8E2028C7CA1E86B33F06663
9DA3F35B7DDFE45432E7A2C574E1841C4747E57802803B51CE345923194466C5
EF852CDD93A3C40922D4091C6271210E8853C875458B992514FC458C505AB921
A870117BEFC5032EC52C5C0B4ED8E033C8825C6A79E135F4917A84EDE1A42949
055FF22F7EA5E707733E7E37910C34363FBCB83155DB7DD17CDFF4D96A4E9E85
EF09E79030FA> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DWBJAN+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/DWBJAN+Helvetica*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one 
/two 33{/.notdef}rp /T 16{/.notdef}rp /e 3{/.notdef}rp /i 3{/.notdef}rp 
/m 5{/.notdef}rp /s 140{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [12.9999 0 0 -13.0217 0 0 ]msf
37.9049 230.639 mo
(00.10.2)
[208.715 7.22794 3.61395 203.444 7.22787 3.61401 0 ]xsh
DWBJAN+Helvetica*1 [14.3001 0 0 -14.3241 0 0 ]msf
285.19 243.014 mo
(Time\(s\))
[8.73724 3.17462 11.9119 7.95084 4.76181 7.15002 0 ]xsh
41.5475 214.011 mo
41.5475 5.37585 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
577.26 214.011 mo
577.26 5.37585 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 214.011 mo
46.9045 214.011 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 144.466 mo
46.9045 144.466 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 74.9212 mo
46.9045 74.9212 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
41.5475 5.37585 mo
46.9045 5.37585 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
577.26 214.011 mo
571.903 214.011 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
577.26 144.466 mo
571.903 144.466 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
577.26 74.9212 mo
571.903 74.9212 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
577.26 5.37585 mo
571.903 5.37585 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DWBJAN+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F8
82286BFB8558FFDC99835F6318B6ABFB469C2D564BB0F5E9BE77FB785FF0A01A
CB21DC4B97A4A57F1F7492892F8DC448ACB9AF11A554513DBE4F7C862B67B87D
D442F1A03C816B99> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DWBJAN+Helvetica /Encoding get
dup 45 /hyphen put
dup 65 /A put
dup 100 /d put
dup 108 /l put
dup 112 /p put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/DWBJAN+Helvetica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero 
/one /two 14{/.notdef}rp /A 18{/.notdef}rp /T 15{/.notdef}rp /d 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 2{/.notdef}rp /p 
2{/.notdef}rp /s /t /u 138{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [12.9999 0 0 -13.0217 0 0 ]msf
14.2334 218.734 mo
(-0.2)sh
14.2334 149.189 mo
(-0.1)sh
29.6623 79.6434 mo
(0)sh
18.5193 10.0984 mo
(0.1)sh
DWBJAN+Helvetica*1 [0 -14.3241 -14.3001 0 0 0 ]msf
12.4909 143.853 mo
(Amplitude)
[-9.55429 -11.9319 -7.96422 -3.17995 -3.17996 -3.9821 -7.96422 -7.9642 0 ]ysh
41.5475 74.4958 mo
41.6815 75.2185 li
41.8155 74.7931 li
41.9494 75.4937 li
42.0831 74.2627 li
42.2174 75.7059 li
42.351 74.8361 li
42.4854 75.897 li
42.6189 74.5599 li
42.7529 76.1523 li
42.8869 71.2281 li
43.0209 74.5819 li
43.1545 75.4306 li
43.2889 75.1124 li
43.4225 74.7301 li
43.5565 74.9633 li
43.6904 74.9843 li
43.8244 75.0694 li
43.958 75.1334 li
44.0924 74.9843 li
44.226 75.0694 li
44.3604 77.2342 li
44.494 74.9212 li
44.628 75.0694 li
44.7619 75.1754 li
44.8959 75.5788 li
45.0295 74.3477 li
45.1639 74.8782 li
45.2975 75.5788 li
45.4315 75.3886 li
45.5655 75.0694 li
45.6995 74.7511 li
45.833 75.3456 li
45.9674 74.9843 li
46.101 74.687 li
46.2354 75.1334 li
46.369 74.5819 li
46.503 75.5998 li
46.637 75.3025 li
46.771 74.687 li
46.9045 76.1523 li
47.0389 73.8813 li
47.1725 77.5104 li
47.3065 75.3666 li
47.4405 74.9843 li
47.5745 74.8582 li
47.7081 75.3025 li
47.8425 73.0957 li
47.976 75.1124 li
48.1104 75.0483 li
48.244 74.709 li
48.378 75.2815 li
48.512 75.0694 li
48.646 74.7301 li
48.7796 74.5179 li
48.9135 75.5998 li
49.0473 75.3666 li
49.1812 75.3886 li
49.3151 76.3004 li
49.449 74.4538 li
49.5829 74.5819 li
49.7178 77.1071 li
49.8507 75.1754 li
49.9856 74.3267 li
50.1194 75.0694 li
50.2533 72.5222 li
50.3872 74.9422 li
50.5211 74.1786 li
50.655 74.2847 li
50.7889 75.4517 li
50.9228 75.3456 li
51.0567 75.4306 li
51.1905 75.3246 li
51.3244 75.0483 li
51.4583 74.7721 li
51.5922 74.9212 li
51.7261 74.7931 li
51.86 74.667 li
51.9939 74.687 li
52.1278 74.7931 li
52.2616 75.0483 li
52.3955 75.1974 li
52.5294 75.1334 li
52.6643 73.9874 li
52.7972 75.2605 li
52.9311 75.3666 li
53.066 74.8582 li
53.1999 75.2605 li
53.3327 76.1733 li
53.4676 75.0273 li
53.6015 74.9843 li
53.7354 74.4758 li
53.8693 73.3079 li
54.0032 74.7301 li
54.1371 75.834 li
54.271 74.9422 li
54.4049 75.0483 li
54.5387 74.0935 li
54.6726 74.624 li
54.8065 74.4958 li
54.9404 74.4538 li
55.0743 75.1544 li
55.2082 75.3456 li
55.3421 75.0694 li
55.476 75.3025 li
55.6108 74.4958 li
55.7437 74.9212 li
55.8776 74.4958 li
56.0115 77.6165 li
56.1464 74.9422 li
56.2793 73.5411 li
56.4142 75.2395 li
56.5471 75.0483 li
56.6819 75.0914 li
56.8158 74.7511 li
56.9497 76.0031 li
57.0826 74.9002 li
57.2175 75.1124 li
57.3514 73.8393 li
57.4853 74.4118 li
57.6191 74.603 li
57.753 75.1334 li
57.8869 75.5788 li
58.0208 73.9444 li
58.1547 75.4727 li
58.2886 74.687 li
58.4225 74.9633 li
58.5564 75.0483 li
58.6903 76.1943 li
58.8241 75.0273 li
58.958 75.0273 li
59.0929 74.4118 li
59.2258 74.3908 li
59.3597 75.0694 li
59.4936 74.4328 li
59.6285 74.5599 li
59.7614 75.1334 li
59.8962 74.2847 li
60.0291 74.3057 li
60.164 76.6407 li
60.2979 75.2395 li
60.4318 75.3456 li
60.5657 74.3908 li
60.6996 74.8782 li
60.8335 74.1786 li
60.9673 75.6848 li
61.1012 75.2185 li
61.2351 74.603 li
61.369 74.5819 li
61.5029 74.709 li
61.6368 73.7753 li
61.7707 74.9212 li
61.9045 74.9633 li
62.0384 74.7511 li
62.1723 75.2605 li
62.3062 74.7931 li
62.4401 75.5147 li
62.574 74.9843 li
62.7079 75.0914 li
62.8428 74.8582 li
62.9756 75.1544 li
63.1095 74.8582 li
63.2444 75.0273 li
63.3783 74.5599 li
63.5112 75.2815 li
63.6461 74.709 li
63.78 73.8813 li
63.9139 74.3267 li
64.0478 75.1124 li
64.1816 74.7931 li
64.3155 75.7279 li
64.4494 74.1356 li
64.5833 74.3698 li
64.7172 75.4937 li
64.8511 75.0483 li
64.985 75.3025 li
65.1189 74.709 li
65.2527 75.0914 li
65.3866 74.8782 li
65.5205 74.4538 li
65.6544 74.4538 li
65.7893 75.2395 li
65.9222 75.1974 li
66.0561 74.3908 li
66.1909 74.2417 li
66.3248 74.0935 li
66.4577 75.5578 li
66.5926 75.3025 li
66.7265 75.0273 li
66.8604 75.3246 li
66.9943 74.5599 li
67.1282 74.603 li
67.262 75.3025 li
67.3959 76.0672 li
67.5298 75.3886 li
67.6637 74.7931 li
67.7976 75.0483 li
67.9315 74.709 li
68.0654 75.5788 li
68.1993 74.3698 li
68.3331 74.9002 li
68.467 74.9212 li
68.6009 74.9002 li
68.7348 75.1334 li
68.8687 74.4538 li
69.0026 75.2605 li
69.1365 75.1124 li
69.2714 74.9212 li
69.4043 75.855 li
69.5391 74.8151 li
69.672 74.687 li
69.8069 74.9422 li
69.9408 75.2395 li
70.0747 73.9444 li
70.2076 74.9002 li
70.3425 75.4727 li
70.4764 75.4727 li
70.6102 75.1124 li
70.7441 74.5389 li
70.878 75.7699 li
71.0119 75.0063 li
71.1458 76.2583 li
71.2797 75.4937 li
71.4136 74.5389 li
71.5475 74.7301 li
71.6813 75.2395 li
71.8152 74.1786 li
71.9491 74.9002 li
72.083 74.1356 li
72.2179 74.9843 li
72.3508 74.687 li
72.4847 74.8151 li
72.6186 74.8782 li
72.7534 74.2627 li
72.8863 76.4915 li
73.0212 74.645 li
73.1541 73.1167 li
73.289 74.1566 li
73.4229 74.8361 li
73.5568 75.1124 li
73.6907 75.1124 li
73.8245 74.2847 li
73.9584 73.9024 li
74.0923 74.4758 li
74.2262 75.0914 li
74.3601 74.7511 li
74.494 75.1974 li
74.6279 75.1754 li
74.7618 74.4328 li
74.8956 75.791 li
75.0295 74.687 li
75.1634 75.2605 li
75.2973 75.1544 li
75.4312 74.7301 li
75.5651 75.7699 li
75.7 75.4727 li
75.8329 74.8361 li
75.9677 74.9633 li
76.1006 74.1566 li
76.2345 74.9212 li
76.3694 74.0515 li
76.5033 74.9212 li
76.6362 75.2605 li
76.7711 75.1124 li
76.905 77.2131 li
77.0388 75.0914 li
77.1727 75.1544 li
77.3066 75.6638 li
77.4405 75.0483 li
77.5744 74.3698 li
77.7083 74.7931 li
77.8422 73.7963 li
77.976 74.4118 li
78.1099 74.9002 li
78.2438 75.1124 li
78.3777 74.7511 li
78.5116 74.4958 li
78.6455 74.8151 li
78.7794 74.8582 li
78.9133 74.7511 li
79.0471 74.3908 li
79.181 75.4096 li
79.3149 74.3908 li
79.4498 75.3886 li
79.5827 78.6984 li
79.7176 75.4517 li
79.8515 74.3477 li
79.9854 75.4517 li
80.1192 75.1974 li
80.2531 74.3908 li
80.387 75.0694 li
80.5209 74.8361 li
80.6548 75.791 li
80.7887 75.3246 li
80.9226 74.8361 li
81.0565 74.4958 li
81.1904 74.4328 li
81.3242 74.7931 li
81.4581 75.2815 li
81.592 74.4328 li
81.7259 76.6407 li
81.8598 75.7699 li
81.9937 75.0273 li
82.1276 76.2583 li
82.2614 75.3025 li
82.3963 74.5819 li
82.5292 74.709 li
82.6631 74.8151 li
82.798 74.645 li
82.9319 75.0483 li
83.0648 74.2417 li
83.1997 76.1733 li
83.3335 75.2185 li
83.4674 74.7301 li
83.6013 75.4727 li
83.7352 74.4118 li
83.8691 75.5147 li
84.003 74.9002 li
84.1369 77.7005 li
84.2708 75.1334 li
84.4047 74.9422 li
84.5385 74.3267 li
84.6724 74.7511 li
84.8063 75.3246 li
84.9402 74.1996 li
85.0741 75.0694 li
85.208 75.1334 li
85.3429 74.9002 li
85.4758 74.709 li
85.6096 74.4958 li
85.7435 73.7963 li
85.8784 74.7301 li
86.0113 74.4958 li
86.1462 75.3025 li
86.2791 75.3246 li
86.414 74.687 li
86.5479 74.2206 li
86.6817 74.645 li
86.8146 75.3886 li
86.9495 74.9422 li
87.0834 74.1786 li
87.2173 75.3246 li
87.3512 75.3456 li
87.4851 75.0273 li
87.619 75.2815 li
87.7529 75.3456 li
87.8867 76.0251 li
88.0206 75.4517 li
88.1545 76.1523 li
88.2884 74.7511 li
88.4223 74.8782 li
88.5562 74.4328 li
88.6901 74.9212 li
88.825 75.0483 li
88.9578 74.603 li
89.0917 75.7699 li
89.2256 73.6481 li
89.3605 75.1124 li
89.4944 75.3456 li
89.6283 75.1334 li
89.7612 75.0063 li
89.896 74.9002 li
90.0299 75.0914 li
90.1638 75.1334 li
90.2977 75.812 li
90.4316 75.0063 li
90.5655 74.8151 li
90.6994 75.0694 li
90.8333 71.5674 li
90.9671 75.0063 li
91.101 74.9002 li
91.2349 75.0273 li
91.3688 75.1974 li
91.5027 75.3666 li
91.6366 75.3886 li
91.7705 75.9611 li
91.9044 74.7931 li
92.0382 74.8361 li
92.1721 74.687 li
92.306 74.7301 li
92.4399 75.0694 li
92.5748 74.4758 li
92.7077 75.4937 li
92.8416 74.7301 li
92.9765 75.0273 li
93.1104 76.0031 li
93.2432 72.9045 li
93.3781 75.1124 li
93.512 75.876 li
93.6459 76.6407 li
93.7798 74.4958 li
93.9137 74.0715 li
94.0476 75.2815 li
94.1814 74.9422 li
94.3153 74.4118 li
94.4492 75.9821 li
94.5831 75.0483 li
94.717 73.1377 li
94.8509 74.3057 li
94.9848 74.4118 li
95.1187 74.4758 li
95.2525 74.3698 li
95.3864 73.5841 li
95.5213 75.0273 li
95.6542 74.645 li
95.7881 74.3698 li
95.923 74.645 li
96.0569 75.7699 li
96.1898 75.1754 li
96.3246 74.667 li
96.4585 74.624 li
96.5924 75.1124 li
96.7263 74.4958 li
96.8602 74.9633 li
96.9941 75.3886 li
97.128 74.9002 li
97.2619 75.7699 li
97.3957 74.2206 li
97.5296 74.9002 li
97.6635 74.9633 li
97.7974 74.4328 li
97.9313 75.2605 li
98.0652 74.5819 li
98.1991 75.0483 li
98.3329 74.4538 li
98.4668 74.667 li
98.6007 75.1974 li
98.7346 75.0483 li
98.8685 76.2794 li
99.0034 75.2185 li
99.1363 75.9191 li
99.2712 74.9002 li
99.4041 75.0914 li
99.5389 75.2185 li
99.6728 75.1334 li
99.8067 74.624 li
99.9396 83.9838 li
100.074 74.667 li
100.208 74.3698 li
100.342 74.8151 li
100.476 74.1356 li
100.61 75.0273 li
100.744 75.2605 li
100.878 74.5389 li
101.012 75.2185 li
101.146 74.645 li
101.279 74.687 li
101.413 74.9002 li
101.547 75.3886 li
101.681 75.7489 li
101.815 72.8204 li
101.95 75.5367 li
102.083 74.4758 li
102.217 75.3456 li
102.351 74.687 li
102.485 74.8782 li
102.618 74.3267 li
102.753 75.6428 li
102.886 74.8151 li
103.021 75.0914 li
103.155 75.0063 li
103.289 74.5819 li
103.423 74.5819 li
103.557 74.4118 li
103.69 75.0914 li
103.824 74.4538 li
103.958 75.2605 li
104.092 75.3666 li
104.226 75.3246 li
104.36 75.2815 li
104.494 74.5389 li
104.628 75.0063 li
104.762 74.4328 li
104.895 74.7721 li
105.029 79.378 li
105.163 75.0694 li
105.297 75.0914 li
105.432 74.9633 li
105.565 74.5389 li
105.7 74.9633 li
105.833 75.4517 li
105.968 76.0251 li
106.101 74.8782 li
106.235 75.4096 li
106.368 74.8361 li
106.503 73.6051 li
106.637 74.8782 li
106.771 74.2627 li
106.905 75.6638 li
107.039 75.3456 li
107.173 74.5599 li
107.306 75.3666 li
107.44 75.1974 li
107.574 74.709 li
107.708 74.8782 li
107.842 74.3908 li
107.976 72.247 li
108.11 74.7511 li
108.244 74.9633 li
108.378 75.1754 li
108.511 74.1356 li
108.645 74.9212 li
108.779 74.5179 li
108.913 74.8582 li
109.047 75.0273 li
109.182 75.834 li
109.315 75.5147 li
109.45 75.3886 li
109.584 75.5367 li
109.717 75.5788 li
109.851 73.6481 li
109.985 75.5367 li
110.119 72.1619 li
110.253 74.4118 li
110.387 74.9212 li
110.521 75.0483 li
110.655 75.2185 li
110.788 75.1124 li
110.922 75.6848 li
111.056 75.1334 li
111.19 75.3666 li
111.324 74.4328 li
111.458 74.9002 li
111.592 75.0694 li
111.726 73.5631 li
111.86 75.9401 li
111.993 74.687 li
112.128 74.687 li
112.261 75.6638 li
112.395 74.645 li
112.53 75.1544 li
112.664 73.9874 li
112.797 75.1544 li
112.932 74.7931 li
113.066 74.624 li
113.199 76.3854 li
113.333 75.1974 li
113.467 74.9633 li
113.601 74.2847 li
113.735 74.0295 li
113.869 75.3666 li
114.003 74.7931 li
114.137 74.1786 li
114.271 74.4958 li
114.404 74.7301 li
114.538 74.603 li
114.672 74.8151 li
114.806 74.603 li
114.94 75.2815 li
115.075 74.624 li
115.208 75.0483 li
115.342 74.603 li
115.476 74.5179 li
115.61 74.4538 li
115.743 75.6218 li
115.878 75.1124 li
116.011 75.7279 li
116.146 74.8782 li
116.28 75.1544 li
116.414 74.4758 li
116.547 75.5367 li
116.682 76.1943 li
116.815 74.9633 li
116.949 74.4538 li
117.083 74.9422 li
117.217 75.1334 li
117.351 72.6073 li
117.485 74.7511 li
117.619 75.1754 li
117.753 74.9212 li
117.887 74.7931 li
118.02 75.0483 li
118.154 74.4118 li
118.288 73.5411 li
118.422 76.0462 li
118.557 74.4958 li
118.69 73.7542 li
118.825 74.7301 li
118.958 75.1754 li
119.093 74.7721 li
119.226 74.0084 li
119.36 74.8782 li
119.493 75.0694 li
119.628 75.0273 li
119.762 75.4096 li
119.896 75.3025 li
120.03 74.5599 li
120.164 74.8151 li
120.298 74.8151 li
120.431 75.4096 li
120.565 74.7721 li
120.699 74.8582 li
120.833 74.7931 li
120.967 75.1754 li
121.101 76.6186 li
121.235 74.8151 li
121.369 74.4758 li
121.503 74.8782 li
121.636 75.2185 li
121.77 75.2605 li
121.904 74.7301 li
122.038 75.1334 li
122.172 75.4937 li
122.307 75.1544 li
122.44 74.7301 li
122.574 74.9422 li
122.708 74.3477 li
122.842 75.5578 li
122.976 74.9212 li
123.11 75.6848 li
123.244 74.8782 li
123.378 74.8361 li
123.512 74.3698 li
123.646 74.667 li
123.78 74.5599 li
123.913 76.3854 li
124.047 75.5147 li
124.181 74.9212 li
124.315 75.0694 li
124.449 74.7931 li
124.583 74.4538 li
124.717 74.4118 li
124.851 74.4118 li
124.985 75.5998 li
125.118 75.2395 li
125.253 74.0295 li
125.386 75.0914 li
125.52 74.9002 li
125.655 75.3666 li
125.789 75.0063 li
125.922 75.5998 li
126.057 75.4306 li
126.191 74.7511 li
126.324 75.5147 li
126.458 74.3908 li
126.592 74.8151 li
126.726 75.1544 li
126.86 74.9212 li
126.994 75.7699 li
127.128 75.0694 li
127.262 74.9633 li
127.396 75.4096 li
127.529 75.1124 li
127.663 74.4758 li
127.797 74.9212 li
127.931 75.6218 li
128.065 74.709 li
128.199 74.5389 li
128.333 74.5819 li
128.467 74.9212 li
128.601 75.3666 li
128.735 74.4328 li
128.868 75.3246 li
129.003 74.8151 li
129.137 73.9874 li
129.271 76.3644 li
129.405 73.457 li
129.539 74.624 li
129.672 74.4958 li
129.807 75.812 li
129.94 75.2605 li
130.074 74.9422 li
130.208 74.709 li
130.342 75.2815 li
130.476 76.0031 li
130.61 74.3267 li
130.744 74.0715 li
130.878 75.2605 li
131.012 74.9633 li
131.145 74.9633 li
131.279 75.4937 li
131.413 75.1544 li
131.547 74.8782 li
131.682 74.5599 li
131.815 74.8361 li
131.949 74.9633 li
132.083 74.667 li
132.217 75.1754 li
132.35 74.7301 li
132.485 76.2583 li
132.618 75.2395 li
132.753 74.2627 li
132.887 74.4118 li
133.021 74.4118 li
133.155 75.5147 li
133.289 73.8813 li
133.423 75.1974 li
133.556 74.8782 li
133.69 74.4958 li
133.824 75.4306 li
133.958 74.9633 li
134.092 74.9633 li
134.226 75.4306 li
134.36 74.0715 li
134.494 74.0935 li
134.628 75.1754 li
134.761 74.709 li
134.895 77.2342 li
135.029 74.5179 li
135.164 74.9422 li
135.297 74.7301 li
135.432 74.5389 li
135.565 74.8151 li
135.7 73.8813 li
135.833 74.5599 li
135.967 75.4727 li
136.1 74.5819 li
136.235 75.0694 li
136.369 74.687 li
136.503 74.667 li
136.637 74.1566 li
136.771 73.1167 li
136.905 74.9422 li
137.038 74.9843 li
137.172 74.5599 li
137.306 75.3025 li
137.44 74.7931 li
137.574 74.2627 li
137.708 75.1334 li
137.842 75.5578 li
137.976 74.687 li
138.11 75.0694 li
138.243 74.5599 li
138.377 74.9002 li
138.511 74.9002 li
138.645 74.4538 li
138.78 74.5179 li
138.914 75.5147 li
139.047 75.4517 li
139.182 75.0914 li
139.316 75.1124 li
139.449 75.5147 li
139.583 75.1754 li
139.717 75.834 li
139.851 74.5179 li
139.985 75.0694 li
140.119 75.6428 li
140.253 74.5179 li
140.387 74.5179 li
140.521 75.0914 li
140.654 74.9422 li
140.788 75.1124 li
140.922 74.0715 li
141.056 75.791 li
141.19 74.5179 li
141.324 75.3666 li
141.458 75.2185 li
141.592 75.0914 li
141.726 75.2185 li
141.86 74.1786 li
141.993 75.2395 li
142.127 74.3477 li
142.262 75.2605 li
142.396 74.687 li
142.529 75.3456 li
142.664 75.3886 li
142.798 74.1566 li
142.932 74.4958 li
143.065 74.7721 li
143.199 72.1409 li
143.333 74.4538 li
143.467 75.7279 li
143.601 74.7721 li
143.735 75.0483 li
143.869 74.9843 li
144.003 74.8782 li
144.136 74.9422 li
144.27 74.687 li
144.404 75.5578 li
144.538 75.4517 li
144.672 75.0483 li
144.807 75.3246 li
144.94 75.9401 li
145.074 74.9633 li
145.208 74.9212 li
145.342 73.9654 li
145.475 74.4758 li
145.61 73.1597 li
145.743 75.4727 li
145.878 74.2627 li
146.012 75.791 li
146.146 75.0694 li
146.279 74.667 li
146.414 75.1754 li
146.547 74.9002 li
146.681 74.7301 li
146.815 74.9633 li
146.949 75.5147 li
147.083 73.0116 li
147.217 74.9002 li
147.351 74.0084 li
147.485 74.8582 li
147.619 75.1124 li
147.752 75.0273 li
147.886 74.709 li
148.02 74.9212 li
148.154 75.6848 li
148.289 75.1974 li
148.422 75.3886 li
148.557 74.1145 li
148.69 75.1974 li
148.825 74.709 li
148.958 75.0694 li
149.092 75.1124 li
149.225 75.7489 li
149.36 74.8361 li
149.494 75.1334 li
149.628 75.2395 li
149.762 74.3698 li
149.896 75.1754 li
150.03 74.8361 li
150.163 76.0882 li
150.297 74.709 li
150.431 73.6481 li
150.565 74.687 li
150.699 74.9843 li
150.833 75.1124 li
150.967 75.1334 li
151.101 75.6638 li
151.236 75.0273 li
151.368 74.9002 li
151.502 74.9422 li
151.636 75.1124 li
151.77 75.0273 li
151.904 74.8782 li
152.039 76.2583 li
152.172 74.9843 li
152.307 75.4517 li
152.441 75.6218 li
152.574 75.1754 li
152.708 74.4118 li
152.842 74.7301 li
152.976 74.9002 li
153.11 74.5599 li
153.244 74.8782 li
153.378 75.5788 li
153.512 75.1124 li
153.646 75.791 li
153.779 75.5147 li
153.913 75.6218 li
154.047 75.2815 li
154.181 74.9633 li
154.315 75.4096 li
154.449 74.9633 li
154.583 75.4937 li
154.717 74.5389 li
154.85 74.709 li
154.985 75.0063 li
155.118 74.9843 li
155.252 75.2395 li
155.387 75.4517 li
155.521 74.709 li
155.654 74.624 li
155.789 75.1124 li
155.923 74.9633 li
156.056 74.687 li
156.19 74.9422 li
156.324 74.667 li
156.458 74.8582 li
156.592 76.0672 li
156.726 74.9212 li
156.86 74.8782 li
156.994 74.1786 li
157.128 75.7489 li
157.261 74.2417 li
157.395 74.4758 li
157.529 74.7931 li
157.663 75.4306 li
157.797 74.9002 li
157.931 75.3246 li
158.065 76.5556 li
158.199 74.687 li
158.334 74.1996 li
158.467 74.687 li
158.6 74.2206 li
158.735 75.2815 li
158.869 74.4328 li
159.003 74.8782 li
159.137 75.1124 li
159.271 74.7721 li
159.405 75.1544 li
159.539 75.2605 li
159.672 74.7301 li
159.806 71.3552 li
159.94 74.709 li
160.074 75.3886 li
160.208 74.709 li
160.342 74.624 li
160.476 74.2627 li
160.61 74.1786 li
160.744 74.9422 li
160.877 75.1124 li
161.011 75.0483 li
161.145 74.8582 li
161.279 74.687 li
161.414 74.9002 li
161.547 75.2395 li
161.681 74.9633 li
161.815 76.1733 li
161.95 75.1334 li
162.082 74.9422 li
162.217 75.3886 li
162.35 75.4517 li
162.485 75.1124 li
162.619 74.645 li
162.753 75.3456 li
162.887 74.9843 li
163.021 74.667 li
163.155 75.3886 li
163.288 75.1754 li
163.422 74.7511 li
163.556 75.2605 li
163.69 75.1124 li
163.824 74.8361 li
163.958 75.1124 li
164.092 74.3477 li
164.226 75.1974 li
164.361 74.7721 li
164.493 75.0694 li
164.627 74.7721 li
164.761 74.687 li
164.896 74.4958 li
165.029 74.8361 li
165.164 74.9002 li
165.297 74.1145 li
165.432 74.7931 li
165.565 75.5367 li
165.699 74.8782 li
165.832 74.9843 li
165.967 74.9212 li
166.101 74.2206 li
166.235 75.0914 li
166.369 74.5389 li
166.503 74.8361 li
166.637 75.5788 li
166.77 75.3456 li
166.904 74.9002 li
167.038 76.3424 li
167.172 74.4958 li
167.306 74.9002 li
167.44 75.791 li
167.574 75.2815 li
167.708 74.0084 li
167.842 75.5788 li
167.975 74.4118 li
168.11 75.0483 li
168.243 74.8361 li
168.377 74.9002 li
168.512 74.7511 li
168.646 74.7511 li
168.779 73.7963 li
168.914 71.4623 li
169.048 74.4118 li
169.181 75.4306 li
169.315 75.1124 li
169.449 74.667 li
169.583 74.603 li
169.717 74.5599 li
169.851 75.0914 li
169.985 74.8782 li
170.119 74.8582 li
170.253 74.5389 li
170.386 76.2794 li
170.52 74.9422 li
170.654 74.3908 li
170.788 74.7931 li
170.922 75.6218 li
171.056 75.1754 li
171.19 75.9821 li
171.324 74.1566 li
171.458 75.4727 li
171.592 75.4096 li
171.725 74.687 li
171.86 74.9843 li
171.994 75.3666 li
172.128 74.1566 li
172.262 74.709 li
172.396 75.9611 li
172.53 75.3025 li
172.664 75.5578 li
172.797 75.0914 li
172.931 75.7699 li
173.065 74.8361 li
173.199 75.855 li
173.333 74.4328 li
173.467 75.5788 li
173.601 74.8151 li
173.735 74.2627 li
173.869 74.5819 li
174.002 77.1921 li
174.136 75.1334 li
174.27 74.3908 li
174.404 74.5179 li
174.539 75.1544 li
174.672 74.9002 li
174.806 75.1124 li
174.94 75.0914 li
175.075 73.3929 li
175.207 74.4758 li
175.342 74.2417 li
175.475 74.8782 li
175.61 75.3666 li
175.744 74.4538 li
175.878 75.3246 li
176.012 74.687 li
176.146 75.1754 li
176.279 75.4727 li
176.413 75.1124 li
176.547 74.4118 li
176.681 75.2185 li
176.815 74.8151 li
176.949 74.667 li
177.083 74.2847 li
177.217 74.8151 li
177.351 74.709 li
177.484 75.0063 li
177.618 74.2417 li
177.752 75.1974 li
177.886 74.687 li
178.021 75.0063 li
178.154 75.2395 li
178.289 75.876 li
178.422 74.7301 li
178.557 75.2185 li
178.69 74.4538 li
178.824 75.1124 li
178.957 74.9212 li
179.092 75.1334 li
179.226 74.9633 li
179.36 75.0694 li
179.494 74.9212 li
179.628 73.9874 li
179.762 75.5147 li
179.895 74.7931 li
180.029 74.667 li
180.163 75.876 li
180.297 75.0914 li
180.431 75.0063 li
180.565 74.1356 li
180.699 74.4958 li
180.833 75.4306 li
180.968 75.3246 li
181.1 76.1302 li
181.234 74.5179 li
181.368 75.7489 li
181.503 74.9002 li
181.636 75.1544 li
181.771 74.9212 li
181.904 74.0515 li
182.039 74.3908 li
182.173 76.2373 li
182.306 75.2605 li
182.44 75.0273 li
182.574 75.4096 li
182.708 73.3929 li
182.842 74.9422 li
182.976 75.0483 li
183.11 74.3477 li
183.244 74.9212 li
183.378 74.3057 li
183.511 74.7301 li
183.645 75.3025 li
183.779 76.0031 li
183.913 75.2185 li
184.047 75.0063 li
184.181 75.7699 li
184.315 74.2627 li
184.449 74.2627 li
184.583 73.6902 li
184.717 74.9212 li
184.85 75.1974 li
184.984 75.0063 li
185.119 74.5599 li
185.253 74.7721 li
185.386 75.2395 li
185.521 75.1124 li
185.655 75.2395 li
185.789 75.2185 li
185.922 75.4517 li
186.056 75.4306 li
186.19 75.3246 li
186.324 74.7931 li
186.458 74.5179 li
186.592 75.6218 li
186.726 75.2815 li
186.86 74.8151 li
186.993 74.9002 li
187.127 75.4937 li
187.261 74.5389 li
187.395 74.603 li
187.529 75.812 li
187.664 74.0295 li
187.797 74.4958 li
187.931 75.5367 li
188.066 74.4758 li
188.199 74.9843 li
188.332 75.0694 li
188.467 75.1544 li
188.601 75.7699 li
188.735 74.2627 li
188.869 74.1786 li
189.003 73.9444 li
189.137 74.8582 li
189.271 75.5788 li
189.404 75.5578 li
189.538 74.8782 li
189.672 74.8582 li
189.806 75.1544 li
189.94 74.2417 li
190.074 74.4758 li
190.208 75.3246 li
190.342 75.812 li
190.476 75.4727 li
190.609 76.9799 li
190.743 75.2395 li
190.877 33.0681 li
191.011 74.5599 li
191.146 74.9002 li
191.279 75.4517 li
191.413 74.667 li
191.547 74.4758 li
191.682 74.7301 li
191.815 75.2395 li
191.949 75.6848 li
192.082 74.7301 li
192.217 74.645 li
192.351 75.2815 li
192.485 74.9422 li
192.619 76.0031 li
192.753 75.5578 li
192.887 75.5367 li
193.02 74.5819 li
193.154 75.0483 li
193.288 77.2772 li
193.422 75.4727 li
193.556 74.0935 li
193.69 75.2815 li
193.824 74.8361 li
193.958 74.4328 li
194.093 75.1974 li
194.225 75.5998 li
194.359 74.2847 li
194.493 74.5179 li
194.628 75.0694 li
194.761 75.3886 li
194.896 75.1544 li
195.029 76.5125 li
195.164 75.3666 li
195.298 74.8361 li
195.431 75.1124 li
195.564 75.6638 li
195.699 74.8361 li
195.833 75.3886 li
195.967 75.0694 li
196.101 74.5179 li
196.235 75.1544 li
196.369 75.5147 li
196.503 75.9191 li
196.636 74.9633 li
196.77 73.2868 li
196.904 74.9422 li
197.038 75.3025 li
197.172 74.0715 li
197.306 74.4118 li
197.44 74.7721 li
197.574 75.4727 li
197.708 75.3456 li
197.842 74.9002 li
197.975 68.9152 li
198.109 74.5819 li
198.244 75.897 li
198.378 74.5179 li
198.511 74.8582 li
198.646 75.0063 li
198.78 75.0483 li
198.913 74.2627 li
199.047 75.2605 li
199.181 74.7301 li
199.315 75.1754 li
199.449 74.9633 li
199.583 74.1786 li
199.717 74.9843 li
199.851 75.834 li
199.985 74.9633 li
200.118 75.7699 li
200.252 74.667 li
200.386 75.3456 li
200.52 74.0715 li
200.654 75.1124 li
200.788 75.3886 li
200.922 74.4958 li
201.056 74.9843 li
201.19 74.645 li
201.324 74.687 li
201.457 75.834 li
201.592 75.1124 li
201.726 74.7301 li
201.86 75.0914 li
201.994 74.9212 li
202.128 74.8151 li
202.262 74.2627 li
202.396 75.0694 li
202.529 75.812 li
202.663 74.687 li
202.797 73.7112 li
202.931 74.7721 li
203.065 75.4096 li
203.199 75.0694 li
203.333 75.1974 li
203.467 74.9422 li
203.601 74.5389 li
203.734 74.9633 li
203.868 75.6848 li
204.002 74.7721 li
204.136 74.4758 li
204.271 74.709 li
204.404 74.603 li
204.538 74.7301 li
204.673 74.9212 li
204.807 74.9633 li
204.939 73.7753 li
205.074 74.1786 li
205.207 74.7301 li
205.342 75.3246 li
205.476 74.5819 li
205.61 76.6407 li
205.744 75.3886 li
205.878 74.9212 li
206.012 75.0914 li
206.145 74.5179 li
206.279 74.7511 li
206.413 74.8361 li
206.547 75.9821 li
206.681 74.7721 li
206.815 74.8361 li
206.949 74.5389 li
207.083 74.8361 li
207.217 75.7279 li
207.35 75.4306 li
207.484 74.5819 li
207.618 75.1124 li
207.753 75.0694 li
207.886 75.3025 li
208.021 75.1544 li
208.154 75.3666 li
208.289 74.4328 li
208.422 74.8151 li
208.556 74.9422 li
208.689 74.9212 li
208.824 74.709 li
208.958 75.4096 li
209.092 73.6261 li
209.226 75.7489 li
209.36 75.3456 li
209.494 75.6428 li
209.628 74.9212 li
209.761 74.1996 li
209.895 74.0935 li
210.029 74.9002 li
210.163 74.4538 li
210.297 74.2206 li
210.431 74.1786 li
210.565 75.6848 li
210.7 75.2185 li
210.832 74.9002 li
210.966 74.603 li
211.1 74.3908 li
211.235 74.5389 li
211.368 74.3057 li
211.503 74.9212 li
211.636 74.709 li
211.771 74.7721 li
211.905 75.3246 li
212.038 76.3854 li
212.172 74.5599 li
212.306 74.7511 li
212.44 74.4958 li
212.574 74.4758 li
212.708 74.5179 li
212.842 74.0084 li
212.976 74.5599 li
213.11 74.8151 li
213.243 74.667 li
213.377 74.1996 li
213.511 74.5389 li
213.645 75.0694 li
213.779 75.4096 li
213.913 75.0483 li
214.047 74.9843 li
214.181 75.4937 li
214.315 74.3057 li
214.449 75.3246 li
214.582 74.3267 li
214.716 76.1523 li
214.851 74.4958 li
214.985 74.4958 li
215.118 74.5599 li
215.253 74.7931 li
215.387 74.8151 li
215.521 75.1754 li
215.654 74.7721 li
215.788 76.7247 li
215.922 75.1544 li
216.056 75.0063 li
216.19 74.8782 li
216.324 74.709 li
216.458 75.1334 li
216.592 75.2605 li
216.726 74.667 li
216.859 74.603 li
216.993 74.8782 li
217.127 74.3267 li
217.261 74.667 li
217.396 75.3456 li
217.529 74.1356 li
217.663 74.7301 li
217.798 75.1124 li
217.932 75.6638 li
218.064 74.7931 li
218.199 75.1974 li
218.333 73.7112 li
218.467 74.9843 li
218.601 75.2605 li
218.735 74.4328 li
218.869 77.1921 li
219.003 74.667 li
219.137 74.4958 li
219.27 74.9633 li
219.404 74.7931 li
219.538 74.624 li
219.672 75.1544 li
219.806 73.9024 li
219.94 75.2815 li
220.074 74.8361 li
220.208 74.3698 li
220.341 74.8361 li
220.475 75.0694 li
220.609 74.4328 li
220.743 76.1092 li
220.878 74.5599 li
221.011 74.9212 li
221.146 74.9212 li
221.279 75.6218 li
221.414 76.3644 li
221.547 74.4758 li
221.681 77.001 li
221.814 74.8151 li
221.949 74.8782 li
222.083 75.0694 li
222.217 74.8582 li
222.351 74.8782 li
222.485 75.6638 li
222.619 75.9191 li
222.752 74.1145 li
222.886 74.1786 li
223.02 74.1996 li
223.154 74.7931 li
223.288 75.6848 li
223.422 74.7721 li
223.556 74.9212 li
223.69 73.5841 li
223.825 74.3057 li
223.957 74.667 li
224.091 75.0063 li
224.225 76.0672 li
224.36 75.5147 li
224.493 75.9611 li
224.628 75.791 li
224.761 75.2605 li
224.896 74.645 li
225.03 75.0483 li
225.163 74.624 li
225.297 74.9422 li
225.431 74.3267 li
225.565 74.7931 li
225.699 74.709 li
225.833 74.8361 li
225.967 74.603 li
226.101 74.624 li
226.235 74.9212 li
226.368 74.3908 li
226.502 74.9212 li
226.636 74.7931 li
226.77 74.624 li
226.904 75.3886 li
227.038 75.5578 li
227.172 74.4328 li
227.307 75.3025 li
227.44 74.8361 li
227.574 74.9002 li
227.707 74.7931 li
227.841 74.3908 li
227.976 74.4538 li
228.11 74.9633 li
228.243 75.2815 li
228.378 73.8393 li
228.512 75.5367 li
228.646 75.6428 li
228.779 75.2185 li
228.913 74.5819 li
229.047 75.4096 li
229.181 75.0063 li
229.315 74.4538 li
229.449 75.0914 li
229.583 75.1974 li
229.717 74.667 li
229.851 75.3886 li
229.984 74.9212 li
230.118 74.7301 li
230.252 75.2395 li
230.386 74.3477 li
230.52 74.9633 li
230.654 75.4306 li
230.788 74.3477 li
230.922 74.709 li
231.056 75.4306 li
231.189 74.7301 li
231.324 75.3886 li
231.458 75.7279 li
231.592 75.1544 li
231.726 74.8151 li
231.86 75.0914 li
231.994 74.8151 li
232.128 75.9401 li
232.261 75.0063 li
232.395 74.8782 li
232.529 75.1124 li
232.663 75.3246 li
232.797 73.8393 li
232.931 76.3424 li
233.065 75.7699 li
233.199 74.8582 li
233.333 74.624 li
233.466 74.0084 li
233.6 74.9422 li
233.734 75.1754 li
233.868 76.1523 li
234.003 75.2395 li
234.136 75.6848 li
234.27 75.0914 li
234.405 74.645 li
234.539 74.4328 li
234.671 74.8582 li
234.806 74.3057 li
234.94 75.6848 li
235.074 74.7931 li
235.208 74.7721 li
235.342 74.8782 li
235.476 74.3477 li
235.61 74.5819 li
235.744 74.8151 li
235.877 75.2185 li
236.011 74.3477 li
236.145 74.667 li
236.279 75.1124 li
236.413 75.3886 li
236.547 81.798 li
236.681 75.0914 li
236.815 74.1996 li
236.95 75.0483 li
237.082 74.5179 li
237.216 76.9369 li
237.35 74.5819 li
237.485 74.7721 li
237.618 74.8782 li
237.753 74.624 li
237.886 76.2373 li
238.021 75.0063 li
238.155 74.8582 li
238.288 75.6848 li
238.421 74.9212 li
238.556 75.1124 li
238.69 75.1754 li
238.824 74.3908 li
238.958 74.7931 li
239.092 74.8151 li
239.226 75.4517 li
239.36 74.2847 li
239.493 73.8393 li
239.627 73.8173 li
239.761 75.7489 li
239.895 75.0273 li
240.029 75.2185 li
240.163 74.3477 li
240.297 75.1124 li
240.432 74.8361 li
240.565 74.8151 li
240.698 74.9002 li
240.832 75.1124 li
240.967 74.5819 li
241.101 74.7931 li
241.235 75.0914 li
241.368 74.8361 li
241.503 75.1754 li
241.637 74.687 li
241.771 74.1356 li
241.904 74.7721 li
242.038 75.1544 li
242.172 74.8151 li
242.306 74.5389 li
242.44 76.0251 li
242.574 74.9212 li
242.708 74.8361 li
242.842 75.0694 li
242.975 75.2605 li
243.109 76.1523 li
243.243 74.8582 li
243.377 75.3666 li
243.511 74.7301 li
243.645 75.2605 li
243.779 74.9633 li
243.913 75.5998 li
244.047 74.7721 li
244.181 74.624 li
244.314 75.1124 li
244.448 74.4758 li
244.583 75.5147 li
244.717 74.9212 li
244.85 74.7931 li
244.985 74.0084 li
245.119 75.1974 li
245.253 75.2185 li
245.386 74.9002 li
245.52 74.1786 li
245.654 75.3666 li
245.788 75.2185 li
245.922 75.2605 li
246.056 76.5556 li
246.19 74.5179 li
246.324 74.4328 li
246.458 75.3886 li
246.591 74.687 li
246.725 74.603 li
246.859 75.0483 li
246.993 74.709 li
247.128 74.7511 li
247.261 75.812 li
247.395 74.7511 li
247.53 74.9002 li
247.664 72.7984 li
247.796 74.1356 li
247.931 74.7511 li
248.065 74.3267 li
248.199 75.7059 li
248.333 75.0063 li
248.467 74.7931 li
248.601 75.2815 li
248.735 73.2448 li
248.869 74.5819 li
249.002 74.9212 li
249.136 74.8782 li
249.27 75.7279 li
249.404 75.2605 li
249.538 74.603 li
249.672 75.6218 li
249.806 75.3666 li
249.94 74.7301 li
250.074 75.2185 li
250.207 74.9843 li
250.341 75.5367 li
250.475 75.4306 li
250.61 75.9611 li
250.743 75.1124 li
250.878 74.603 li
251.011 73.5411 li
251.146 76.0031 li
251.28 75.2185 li
251.413 74.3057 li
251.546 74.2206 li
251.681 74.7301 li
251.815 74.5179 li
251.949 74.8782 li
252.083 77.5744 li
252.217 75.0694 li
252.351 74.8782 li
252.484 74.603 li
252.618 74.603 li
252.752 74.624 li
252.886 75.1754 li
253.02 74.9212 li
253.154 74.7931 li
253.288 74.0295 li
253.422 75.4096 li
253.557 76.1733 li
253.689 74.687 li
253.823 73.7963 li
253.957 75.1334 li
254.092 74.8782 li
254.225 74.709 li
254.36 74.9422 li
254.493 74.1786 li
254.628 75.5367 li
254.762 75.4306 li
254.895 74.8151 li
255.029 75.1124 li
255.163 75.4517 li
255.297 75.0273 li
255.431 200.246 li
255.565 74.9212 li
255.699 75.2395 li
255.833 73.9874 li
255.967 74.4958 li
256.1 74.3267 li
256.234 74.645 li
256.368 74.4538 li
256.502 75.6848 li
256.636 74.8151 li
256.77 73.9874 li
256.904 75.4096 li
257.039 74.8782 li
257.172 75.2185 li
257.306 75.9821 li
257.439 75.6638 li
257.574 71.6945 li
257.708 75.7489 li
257.842 75.0694 li
257.975 75.2605 li
258.11 74.7301 li
258.244 77.7005 li
258.378 74.645 li
258.511 74.2627 li
258.645 75.4096 li
258.779 74.8582 li
258.913 74.8582 li
259.047 75.4306 li
259.181 75.0273 li
259.315 74.4758 li
259.449 75.4517 li
259.583 74.603 li
259.716 74.2417 li
259.85 74.5599 li
259.984 74.645 li
260.118 74.9843 li
260.252 74.624 li
260.386 74.4958 li
260.52 74.8151 li
260.654 75.0694 li
260.789 75.3666 li
260.921 74.8582 li
261.056 74.4118 li
261.19 74.4538 li
261.324 74.8782 li
261.458 74.3057 li
261.592 77.6165 li
261.726 75.9191 li
261.86 75.2815 li
261.994 75.1334 li
262.127 76.1523 li
262.261 74.8782 li
262.395 74.7301 li
262.529 75.9191 li
262.663 74.2627 li
262.797 75.3025 li
262.931 74.3698 li
263.065 74.8151 li
263.199 74.667 li
263.332 74.603 li
263.466 74.8782 li
263.6 74.2847 li
263.735 74.8782 li
263.868 74.4758 li
264.002 75.6848 li
264.137 75.0914 li
264.271 74.1996 li
264.404 75.3246 li
264.538 74.9422 li
264.672 74.4958 li
264.806 74.7721 li
264.94 74.709 li
265.074 74.645 li
265.208 75.7059 li
265.342 75.0273 li
265.476 74.3908 li
265.609 75.0063 li
265.743 74.5819 li
265.877 75.3246 li
266.011 74.7721 li
266.145 74.8151 li
266.279 74.645 li
266.413 75.1334 li
266.547 75.2185 li
266.682 75.1124 li
266.814 74.4538 li
266.948 74.7511 li
267.082 75.3456 li
267.217 74.5599 li
267.35 75.1334 li
267.485 74.3698 li
267.618 74.8582 li
267.753 74.9633 li
267.887 74.3698 li
268.02 71.9287 li
268.153 74.8582 li
268.288 75.0483 li
268.422 75.4096 li
268.556 75.0914 li
268.69 75.4096 li
268.824 73.8393 li
268.958 74.624 li
269.092 75.5998 li
269.225 74.7301 li
269.359 75.0483 li
269.493 74.3698 li
269.627 74.7721 li
269.761 75.1334 li
269.895 75.1334 li
270.029 74.4328 li
270.164 74.7721 li
270.297 75.0273 li
270.431 72.8415 li
270.564 75.0694 li
270.699 74.2847 li
270.833 74.2847 li
270.967 75.7059 li
271.1 75.2605 li
271.235 75.3666 li
271.369 74.4958 li
271.503 75.5367 li
271.636 74.9422 li
271.77 75.4517 li
271.904 74.9002 li
272.038 75.1544 li
272.172 74.4958 li
272.306 75.3025 li
272.44 74.9002 li
272.574 74.667 li
272.708 74.5599 li
272.841 75.1544 li
272.975 75.6848 li
273.109 75.2185 li
273.243 75.7699 li
273.377 73.2868 li
273.511 74.0295 li
273.645 75.0063 li
273.779 75.0694 li
273.914 73.9024 li
274.046 75.4306 li
274.18 75.876 li
274.315 74.8782 li
274.449 77.8707 li
274.583 74.4758 li
274.717 74.5389 li
274.851 74.7721 li
274.985 75.0273 li
275.118 74.8582 li
275.252 75.2185 li
275.386 74.9633 li
275.52 75.6218 li
275.654 72.247 li
275.788 75.1124 li
275.922 75.3456 li
276.056 74.9212 li
276.19 74.624 li
276.323 74.5389 li
276.457 75.2815 li
276.591 74.687 li
276.725 75.7489 li
276.86 74.4328 li
276.993 75.0694 li
277.127 74.8151 li
277.262 73.3929 li
277.396 73.435 li
277.528 74.8361 li
277.663 75.7279 li
277.797 74.9843 li
277.931 74.8361 li
278.065 74.5819 li
278.199 75.0063 li
278.333 74.624 li
278.467 74.9633 li
278.601 75.3456 li
278.734 74.603 li
278.868 75.5998 li
279.002 75.3025 li
279.136 74.709 li
279.27 75.0483 li
279.404 74.9633 li
279.538 74.603 li
279.672 74.8582 li
279.806 75.2605 li
279.939 75.0273 li
280.073 74.4758 li
280.207 74.7301 li
280.342 73.9874 li
280.475 74.9422 li
280.61 75.1124 li
280.744 75.5367 li
280.878 78.0829 li
281.012 75.0914 li
281.145 74.3698 li
281.278 75.4306 li
281.413 75.6218 li
281.547 74.5389 li
281.681 75.4096 li
281.815 75.1544 li
281.949 74.7511 li
282.083 74.2206 li
282.217 75.1974 li
282.35 74.9422 li
282.484 75.0483 li
282.618 74.3698 li
282.752 74.624 li
282.886 75.812 li
283.02 75.5367 li
283.154 75.1754 li
283.289 74.603 li
283.422 74.1356 li
283.555 74.8582 li
283.689 74.603 li
283.824 75.0694 li
283.957 74.5599 li
284.092 74.7931 li
284.225 75.4517 li
284.36 75.1974 li
284.494 74.645 li
284.628 74.603 li
284.761 74.8151 li
284.895 76.1092 li
285.029 74.709 li
285.163 76.0672 li
285.297 74.5389 li
285.431 71.143 li
285.565 75.3025 li
285.699 75.1544 li
285.832 75.2185 li
285.966 74.5819 li
286.1 74.9212 li
286.235 73.6692 li
286.368 75.0063 li
286.502 75.3246 li
286.636 74.7511 li
286.771 74.0295 li
286.904 78.1469 li
287.038 74.4758 li
287.171 75.1974 li
287.306 74.9212 li
287.44 74.7511 li
287.574 74.0084 li
287.707 74.8361 li
287.842 74.4328 li
287.976 74.9212 li
288.11 74.4328 li
288.243 74.8582 li
288.377 74.7721 li
288.511 76.1943 li
288.645 74.7721 li
288.779 74.7931 li
288.913 74.5389 li
289.047 74.0935 li
289.181 74.0935 li
289.315 75.0483 li
289.448 74.7931 li
289.582 74.7931 li
289.716 75.897 li
289.85 75.6638 li
289.984 64.7126 li
290.118 74.8782 li
290.252 75.5578 li
290.387 75.1544 li
290.521 74.4118 li
290.653 74.3908 li
290.788 74.9843 li
290.922 75.5788 li
291.056 74.8151 li
291.19 74.687 li
291.324 74.3477 li
291.458 75.3666 li
291.592 75.5147 li
291.726 74.1145 li
291.859 74.7301 li
291.993 75.9191 li
292.127 74.645 li
292.261 74.645 li
292.395 74.2847 li
292.529 75.6638 li
292.663 75.2605 li
292.797 75.3886 li
292.931 75.4517 li
293.064 75.3246 li
293.198 74.9422 li
293.332 74.9212 li
293.467 74.9002 li
293.6 75.6428 li
293.734 75.0273 li
293.869 74.687 li
294.003 74.9633 li
294.136 75.6218 li
294.27 76.3004 li
294.404 74.2627 li
294.538 75.3025 li
294.672 75.2815 li
294.806 75.5367 li
294.94 74.0715 li
295.074 75.0483 li
295.208 75.1124 li
295.342 74.5179 li
295.475 73.6051 li
295.609 74.603 li
295.743 74.4328 li
295.877 74.667 li
296.011 80.5239 li
296.145 74.9422 li
296.279 75.5367 li
296.414 74.1145 li
296.547 75.1124 li
296.68 75.5788 li
296.814 74.8782 li
296.949 74.8361 li
297.082 74.9002 li
297.217 75.2815 li
297.35 74.667 li
297.485 75.0694 li
297.619 75.1544 li
297.753 74.8582 li
297.885 75.1334 li
298.02 75.2605 li
298.154 73.7322 li
298.288 75.0483 li
298.422 75.0483 li
298.556 75.4937 li
298.69 74.3057 li
298.824 74.9843 li
298.957 74.0084 li
299.091 75.0694 li
299.225 74.7721 li
299.359 74.8151 li
299.493 75.3456 li
299.627 74.5179 li
299.761 74.9843 li
299.896 74.5179 li
300.029 74.4758 li
300.163 74.8782 li
300.296 75.1544 li
300.431 74.7931 li
300.565 75.3456 li
300.699 74.9633 li
300.832 74.3698 li
300.967 75.5367 li
301.101 75.3666 li
301.235 75.2815 li
301.368 71.8647 li
301.502 75.4727 li
301.636 74.1566 li
301.77 74.667 li
301.904 75.1124 li
302.038 73.457 li
302.172 74.8361 li
302.306 74.5599 li
302.44 74.4958 li
302.573 74.5599 li
302.707 74.1356 li
302.842 74.645 li
302.975 74.7721 li
303.109 75.3886 li
303.243 76.0462 li
303.377 75.1544 li
303.511 77.3192 li
303.646 74.4328 li
303.778 74.7301 li
303.913 73.8813 li
304.047 74.9002 li
304.181 74.9002 li
304.315 74.1566 li
304.449 74.5389 li
304.583 75.1544 li
304.717 74.3698 li
304.851 75.4306 li
304.984 74.624 li
305.118 74.8782 li
305.252 74.9212 li
305.386 74.667 li
305.52 75.0694 li
305.654 74.7301 li
305.788 75.3886 li
305.922 75.1124 li
306.056 75.4517 li
306.189 74.7931 li
306.323 75.3666 li
306.457 75.7699 li
306.592 75.2815 li
306.725 75.3666 li
306.859 74.8151 li
306.994 75.5998 li
307.128 74.3267 li
307.261 74.8782 li
307.395 74.4538 li
307.529 74.687 li
307.663 75.1974 li
307.797 74.8782 li
307.931 74.667 li
308.065 75.6218 li
308.199 75.1544 li
308.333 75.7489 li
308.466 74.8151 li
308.6 75.0063 li
308.734 75.2395 li
308.868 75.2395 li
309.002 74.3057 li
309.136 75.791 li
309.27 75.2605 li
309.404 75.1974 li
309.538 74.7301 li
309.671 75.7279 li
309.805 74.667 li
309.939 74.7511 li
310.074 75.5367 li
310.207 75.2395 li
310.342 75.855 li
310.476 75.4937 li
310.61 74.624 li
310.744 74.667 li
310.877 74.8582 li
311.011 74.3908 li
311.145 74.5389 li
311.279 75.6218 li
311.413 74.4958 li
311.547 74.8582 li
311.681 75.0483 li
311.815 76.0031 li
311.949 75.2815 li
312.082 75.3456 li
312.216 75.4096 li
312.35 75.1544 li
312.484 74.9002 li
312.618 74.603 li
312.752 75.0694 li
312.886 74.2847 li
313.021 74.3057 li
313.154 74.8782 li
313.287 74.9633 li
313.421 75.1124 li
313.555 74.9633 li
313.689 74.1566 li
313.824 74.8582 li
313.957 75.4096 li
314.092 74.645 li
314.226 74.9843 li
314.36 75.5367 li
314.493 74.667 li
314.627 75.0483 li
314.761 74.7721 li
314.895 75.3246 li
315.029 75.1544 li
315.163 75.0063 li
315.297 74.3698 li
315.431 75.9401 li
315.565 74.8151 li
315.698 74.624 li
315.832 75.0914 li
315.967 75.1974 li
316.1 74.709 li
316.234 74.5389 li
316.368 74.3908 li
316.503 74.1145 li
316.636 75.4727 li
316.771 74.2847 li
316.903 75.2185 li
317.038 74.4758 li
317.172 75.2185 li
317.306 74.9843 li
317.439 73.6261 li
317.574 75.4306 li
317.708 74.9212 li
317.842 71.9707 li
317.976 75.1334 li
318.109 74.9212 li
318.243 74.3267 li
318.377 74.7931 li
318.511 75.5367 li
318.645 75.834 li
318.779 75.2185 li
318.913 74.645 li
319.047 74.7931 li
319.18 75.2815 li
319.314 73.2658 li
319.448 74.4958 li
319.582 73.6261 li
319.717 74.9212 li
319.85 75.5367 li
319.984 73.9654 li
320.119 75.3886 li
320.253 74.687 li
320.385 74.9422 li
320.52 74.3698 li
320.654 75.2185 li
320.788 73.8393 li
320.922 75.0694 li
321.055 74.9212 li
321.19 74.667 li
321.324 74.5819 li
321.458 74.687 li
321.591 75.1334 li
321.725 74.9633 li
321.859 76.0462 li
321.993 74.1786 li
322.127 75.5788 li
322.261 74.3267 li
322.395 74.9633 li
322.529 74.4958 li
322.663 75.5147 li
322.796 75.3456 li
322.93 74.4758 li
323.064 75.1124 li
323.199 74.8361 li
323.332 74.8782 li
323.466 74.4328 li
323.601 74.8151 li
323.735 75.3246 li
323.869 75.2395 li
324.002 74.9633 li
324.136 75.4727 li
324.27 75.0914 li
324.404 74.624 li
324.538 75.1334 li
324.672 74.7511 li
324.806 74.3057 li
324.94 75.2185 li
325.074 75.1124 li
325.207 74.7511 li
325.341 74.2847 li
325.475 74.0715 li
325.609 74.8151 li
325.743 75.5998 li
325.877 75.1974 li
326.011 74.2627 li
326.146 74.9002 li
326.279 74.687 li
326.412 75.1334 li
326.546 74.5819 li
326.681 75.4306 li
326.814 75.6428 li
326.949 73.8603 li
327.082 74.4758 li
327.216 74.4328 li
327.351 75.0063 li
327.485 74.709 li
327.617 74.9633 li
327.752 75.3025 li
327.886 74.624 li
328.02 74.624 li
328.154 74.8151 li
328.288 75.6848 li
328.422 75.0273 li
328.556 74.9422 li
328.69 74.3698 li
328.823 75.0694 li
328.957 74.1996 li
329.091 75.4096 li
329.225 74.9422 li
329.359 75.0273 li
329.493 75.0063 li
329.628 75.3025 li
329.761 75.0063 li
329.896 74.7511 li
330.028 75.1124 li
330.163 74.624 li
330.297 74.5599 li
330.431 74.4958 li
330.564 74.667 li
330.699 75.4096 li
330.833 74.1786 li
330.967 74.1996 li
331.1 75.3666 li
331.234 74.8151 li
331.368 74.1996 li
331.502 74.5179 li
331.636 74.7721 li
331.77 74.709 li
331.904 74.8782 li
332.038 69.3395 li
332.172 75.4727 li
332.305 74.8361 li
332.439 75.2605 li
332.574 74.8361 li
332.707 73.9444 li
332.841 75.6428 li
332.975 75.0273 li
333.11 75.4727 li
333.243 74.7931 li
333.377 74.4328 li
333.51 74.8782 li
333.645 74.3477 li
333.779 74.4328 li
333.913 75.3025 li
334.047 75.0273 li
334.181 75.5788 li
334.315 74.3698 li
334.449 75.2185 li
334.583 68.4908 li
334.715 74.4958 li
334.85 76.4915 li
334.984 74.624 li
335.118 74.9212 li
335.252 74.624 li
335.386 74.3057 li
335.52 75.7489 li
335.654 73.9874 li
335.788 74.709 li
335.921 75.0273 li
336.055 73.0957 li
336.189 75.0694 li
336.324 74.5179 li
336.457 75.3025 li
336.591 74.709 li
336.726 74.2627 li
336.86 74.9002 li
336.993 75.1974 li
337.127 74.7931 li
337.261 74.8151 li
337.395 74.8782 li
337.529 74.9422 li
337.663 74.603 li
337.797 74.4328 li
337.931 73.9874 li
338.065 73.8393 li
338.199 74.7511 li
338.332 75.5788 li
338.466 74.603 li
338.6 74.3057 li
338.734 75.5147 li
338.868 74.9843 li
339.002 74.1996 li
339.136 75.1754 li
339.27 75.2815 li
339.404 74.2847 li
339.537 74.624 li
339.672 75.3886 li
339.806 75.0273 li
339.939 74.3057 li
340.074 75.1544 li
340.208 74.1996 li
340.342 75.1334 li
340.476 76.2794 li
340.61 73.6692 li
340.743 74.624 li
340.877 74.4328 li
341.011 75.1124 li
341.145 75.3666 li
341.279 74.5599 li
341.413 75.2185 li
341.547 73.8603 li
341.681 74.3908 li
341.814 74.3698 li
341.948 75.3886 li
342.082 75.1754 li
342.216 74.8582 li
342.35 75.1754 li
342.484 74.8582 li
342.618 75.9191 li
342.753 75.0914 li
342.886 75.1124 li
343.019 75.1974 li
343.153 75.4096 li
343.288 75.1974 li
343.421 75.897 li
343.556 74.3908 li
343.689 75.5788 li
343.824 75.1544 li
343.958 75.4096 li
344.092 74.4328 li
344.225 74.667 li
344.359 74.8582 li
344.493 74.9633 li
344.627 74.1996 li
344.761 74.9843 li
344.895 75.1754 li
345.029 75.2605 li
345.163 74.1356 li
345.297 74.0295 li
345.43 75.2185 li
345.564 75.4306 li
345.699 74.8361 li
345.832 74.667 li
345.966 74.624 li
346.1 73.3509 li
346.235 75.0694 li
346.368 74.9633 li
346.503 74.8582 li
346.635 74.7511 li
346.77 72.7354 li
346.904 75.3246 li
347.037 75.0694 li
347.171 74.4328 li
347.306 75.6428 li
347.44 76.5125 li
347.574 75.3025 li
347.708 74.9843 li
347.841 74.3267 li
347.975 74.9843 li
348.109 75.0273 li
348.243 75.0273 li
348.377 75.1754 li
348.511 73.6902 li
348.645 75.0063 li
348.779 74.1356 li
348.913 74.5389 li
349.046 75.0914 li
349.18 75.1124 li
349.314 75.3456 li
349.449 75.2815 li
349.582 74.4118 li
349.716 74.5819 li
349.851 75.0914 li
349.985 74.9633 li
350.118 74.7301 li
350.252 74.3698 li
350.386 74.8782 li
350.52 76.3004 li
350.654 75.2395 li
350.788 75.4096 li
350.922 74.0515 li
351.056 73.5631 li
351.19 73.2658 li
351.324 74.7511 li
351.457 74.7301 li
351.591 75.1974 li
351.725 74.3267 li
351.859 74.4958 li
351.993 74.4758 li
352.127 74.8582 li
352.261 74.8782 li
352.395 75.1754 li
352.529 74.2206 li
352.662 73.478 li
352.796 76.2373 li
352.931 75.1754 li
353.064 74.9843 li
353.199 75.897 li
353.333 74.8582 li
353.467 75.3666 li
353.601 75.0694 li
353.734 74.0295 li
353.868 74.5389 li
354.002 74.8361 li
354.136 74.9633 li
354.27 75.0273 li
354.404 74.4758 li
354.538 76.8728 li
354.672 74.9002 li
354.806 74.645 li
354.939 75.0483 li
355.073 74.7721 li
355.207 75.7489 li
355.341 75.3025 li
355.475 75.1974 li
355.609 75.5998 li
355.743 73.9654 li
355.877 74.2417 li
356.011 74.7511 li
356.144 75.2395 li
356.279 72.0978 li
356.413 74.8361 li
356.546 75.0063 li
356.681 75.7279 li
356.814 74.8782 li
356.949 75.0063 li
357.083 74.8151 li
357.217 73.7963 li
357.35 75.2185 li
357.484 74.709 li
357.618 74.3267 li
357.752 75.3886 li
357.886 75.7279 li
358.02 75.0694 li
358.154 75.4096 li
358.288 75.7059 li
358.422 74.4758 li
358.555 74.5179 li
358.689 74.645 li
358.823 74.5819 li
358.957 74.3698 li
359.091 73.6261 li
359.225 73.9444 li
359.36 74.645 li
359.493 74.2627 li
359.628 75.4306 li
359.76 75.6428 li
359.895 77.4894 li
360.029 74.4758 li
360.163 75.0694 li
360.296 75.4096 li
360.431 73.6051 li
360.565 75.1754 li
360.698 75.2605 li
360.833 76.5125 li
360.966 73.9024 li
361.1 75.5788 li
361.234 73.8393 li
361.368 75.3025 li
361.502 75.1974 li
361.636 74.624 li
361.77 75.4517 li
361.904 75.4306 li
362.038 74.667 li
362.171 74.8582 li
362.306 74.0935 li
362.439 76.1302 li
362.573 74.3698 li
362.707 75.1334 li
362.842 75.3886 li
362.975 75.5998 li
363.11 75.5578 li
363.243 74.0715 li
363.377 74.9422 li
363.511 74.645 li
363.645 74.9633 li
363.779 74.8582 li
363.913 75.7699 li
364.047 74.3057 li
364.181 74.0515 li
364.315 74.9843 li
364.448 75.9191 li
364.582 74.1996 li
364.716 75.0483 li
364.85 75.1974 li
364.984 74.8782 li
365.118 74.645 li
365.252 74.624 li
365.386 74.9212 li
365.52 74.3057 li
365.653 75.0914 li
365.787 74.9843 li
365.921 74.9422 li
366.056 75.1124 li
366.189 74.9422 li
366.323 75.2185 li
366.458 74.5819 li
366.592 74.4958 li
366.725 74.3057 li
366.858 74.9422 li
366.993 75.3025 li
367.127 74.709 li
367.261 74.8361 li
367.395 74.687 li
367.529 74.5819 li
367.663 73.7112 li
367.797 73.6051 li
367.931 74.5599 li
368.064 72.6503 li
368.198 74.8782 li
368.332 74.5389 li
368.466 75.0273 li
368.6 74.1786 li
368.734 74.624 li
368.868 74.7301 li
369.003 75.5147 li
369.136 75.2185 li
369.269 74.9633 li
369.404 74.1996 li
369.537 76.1302 li
369.671 75.7059 li
369.806 74.7511 li
369.94 75.3246 li
370.074 74.7931 li
370.208 74.1566 li
370.342 74.3698 li
370.475 75.3456 li
370.609 74.9212 li
370.743 75.2395 li
370.877 74.9422 li
371.011 75.0273 li
371.145 74.4538 li
371.279 74.3908 li
371.413 74.8582 li
371.547 74.4118 li
371.68 74.8782 li
371.814 74.8151 li
371.948 74.2206 li
372.082 66.368 li
372.216 73.7542 li
372.35 73.2448 li
372.485 75.0063 li
372.618 74.8582 li
372.753 74.9422 li
372.885 74.5819 li
373.02 74.624 li
373.154 74.709 li
373.288 74.5389 li
373.421 75.0483 li
373.556 74.5389 li
373.69 73.9444 li
373.824 74.9633 li
373.957 74.8361 li
374.091 76.0882 li
374.225 74.4538 li
374.359 74.2847 li
374.493 73.7753 li
374.627 74.8582 li
374.761 74.8361 li
374.895 75.5578 li
375.029 74.5389 li
375.162 74.9843 li
375.296 75.3666 li
375.431 74.2847 li
375.564 75.0483 li
375.698 74.687 li
375.832 75.0273 li
375.967 74.4328 li
376.1 74.4958 li
376.235 74.3267 li
376.367 74.8361 li
376.502 74.7511 li
376.636 75.1544 li
376.77 74.603 li
376.904 75.3025 li
377.038 74.4758 li
377.172 74.9002 li
377.306 75.1544 li
377.44 74.8361 li
377.573 74.624 li
377.707 75.834 li
377.841 76.5556 li
377.975 74.9422 li
378.109 75.5578 li
378.243 74.603 li
378.377 75.834 li
378.511 78.0629 li
378.645 74.9212 li
378.778 73.478 li
378.912 75.2395 li
379.046 75.0063 li
379.181 75.1754 li
379.314 75.5367 li
379.448 74.9212 li
379.583 75.791 li
379.717 75.834 li
379.85 74.5389 li
379.984 74.7511 li
380.118 75.1334 li
380.252 75.9821 li
380.386 75.1334 li
380.519 75.2395 li
380.654 74.2206 li
380.788 74.7301 li
380.922 75.4096 li
381.056 74.0515 li
381.189 75.0483 li
381.323 74.645 li
381.457 74.1996 li
381.591 74.645 li
381.725 74.2206 li
381.859 75.1334 li
381.993 74.0935 li
382.127 75.3456 li
382.261 69.8279 li
382.394 75.0694 li
382.528 74.5389 li
382.663 75.1544 li
382.796 75.4306 li
382.931 75.0273 li
383.065 74.2206 li
383.199 75.7699 li
383.333 74.9002 li
383.466 72.6293 li
383.6 75.0694 li
383.734 74.9212 li
383.868 74.4328 li
384.002 75.3246 li
384.136 75.0273 li
384.27 75.4517 li
384.404 75.3456 li
384.538 75.1124 li
384.672 75.2395 li
384.805 74.9843 li
384.939 74.9843 li
385.073 74.2847 li
385.207 76.4495 li
385.341 74.8782 li
385.475 75.3886 li
385.61 75.0694 li
385.743 75.1124 li
385.876 74.8151 li
386.011 75.1334 li
386.145 74.8782 li
386.278 75.0273 li
386.413 74.9633 li
386.547 74.4758 li
386.681 74.4758 li
386.815 75.1124 li
386.949 75.2605 li
387.083 74.1566 li
387.216 74.7511 li
387.35 74.7931 li
387.484 74.8361 li
387.618 75.1544 li
387.752 75.0914 li
387.886 75.3886 li
388.02 74.7931 li
388.154 74.603 li
388.287 74.8361 li
388.421 75.4096 li
388.556 75.6428 li
388.689 74.667 li
388.823 74.0515 li
388.957 75.1544 li
389.092 74.4538 li
389.225 74.2417 li
389.36 74.9422 li
389.492 74.603 li
389.627 74.9633 li
389.761 74.7931 li
389.895 75.1334 li
390.028 74.3267 li
390.163 75.7699 li
390.297 74.645 li
390.431 75.0273 li
390.565 74.645 li
390.698 75.6218 li
390.832 74.3698 li
390.966 74.1145 li
391.1 75.4727 li
391.234 74.8151 li
391.368 75.1754 li
391.502 74.709 li
391.636 75.1124 li
391.77 74.8782 li
391.903 74.8582 li
392.038 73.9234 li
392.171 76.7888 li
392.305 75.6638 li
392.439 73.9444 li
392.574 76.5976 li
392.708 74.7511 li
392.842 81.7339 li
392.975 75.4937 li
393.109 74.4118 li
393.243 76.6186 li
393.377 75.1974 li
393.511 76.3854 li
393.645 74.9002 li
393.779 81.4787 li
393.913 74.2847 li
394.047 74.5389 li
394.181 74.9002 li
394.314 75.4937 li
394.448 74.7721 li
394.582 74.8151 li
394.716 75.3666 li
394.85 75.3246 li
394.984 75.7279 li
395.118 74.667 li
395.252 75.4096 li
395.385 75.3025 li
395.519 75.1974 li
395.653 73.9234 li
395.788 75.5998 li
395.921 75.5998 li
396.055 74.7721 li
396.19 74.5389 li
396.324 75.9191 li
396.457 74.2847 li
396.592 75.3025 li
396.725 75.0914 li
396.859 75.5998 li
396.993 75.6428 li
397.127 74.3908 li
397.261 75.0483 li
397.395 74.9633 li
397.529 75.2185 li
397.663 75.5788 li
397.797 74.8582 li
397.93 74.8582 li
398.064 74.3057 li
398.198 74.7721 li
398.332 74.3908 li
398.466 74.1786 li
398.6 75.7699 li
398.735 74.2206 li
398.868 74.0084 li
399.001 75.5998 li
399.136 74.2417 li
399.27 74.3057 li
399.403 74.4118 li
399.538 74.7721 li
399.672 75.1544 li
399.806 74.5819 li
399.94 74.5819 li
400.074 74.0515 li
400.207 75.0694 li
400.341 75.5147 li
400.475 75.3886 li
400.609 75.5367 li
400.743 75.5367 li
400.877 74.4538 li
401.011 76.3424 li
401.145 75.4096 li
401.279 74.4758 li
401.412 73.9874 li
401.546 75.3025 li
401.68 75.7059 li
401.814 75.3246 li
401.948 74.645 li
402.082 74.3057 li
402.217 74.3057 li
402.35 75.2605 li
402.485 75.2395 li
402.617 75.9821 li
402.752 74.9422 li
402.886 76.3004 li
403.02 75.1754 li
403.153 75.0273 li
403.288 75.4306 li
403.422 74.8582 li
403.556 75.3666 li
403.69 74.9422 li
403.823 74.9843 li
403.957 75.3025 li
404.091 74.9633 li
404.225 74.3698 li
404.359 73.1808 li
404.493 74.4328 li
404.627 75.1334 li
404.761 74.9633 li
404.895 75.6428 li
405.028 75.1334 li
405.163 74.8782 li
405.296 75.897 li
405.43 74.9843 li
405.564 73.3929 li
405.699 74.687 li
405.832 74.7721 li
405.967 74.7931 li
406.099 74.7301 li
406.234 73.8813 li
406.368 73.9654 li
406.502 74.8151 li
406.636 75.791 li
406.77 74.9422 li
406.904 74.7511 li
407.038 75.3246 li
407.172 75.0483 li
407.306 75.0914 li
407.439 74.624 li
407.573 74.0084 li
407.707 75.855 li
407.841 74.9633 li
407.975 74.9212 li
408.109 75.2605 li
408.243 74.4328 li
408.377 74.5599 li
408.51 75.5367 li
408.645 74.5599 li
408.778 74.3477 li
408.913 75.3456 li
409.046 75.3246 li
409.181 75.3886 li
409.315 73.8813 li
409.449 75.1124 li
409.582 75.4096 li
409.716 74.4118 li
409.85 75.2605 li
409.984 75.5998 li
410.118 74.7931 li
410.252 74.8582 li
410.386 74.7721 li
410.52 74.9002 li
410.654 74.0084 li
410.788 72.8204 li
410.921 75.1334 li
411.055 75.1974 li
411.189 76.3644 li
411.323 75.1544 li
411.457 74.5179 li
411.591 75.2815 li
411.725 75.0694 li
411.859 76.0031 li
411.993 75.9191 li
412.126 74.5389 li
412.26 74.9422 li
412.395 74.9422 li
412.528 75.7699 li
412.663 74.8361 li
412.797 75.1974 li
412.931 75.1334 li
413.065 74.7721 li
413.199 74.8361 li
413.332 74.9633 li
413.466 74.709 li
413.6 74.8582 li
413.734 74.8582 li
413.868 74.3267 li
414.002 74.603 li
414.136 74.7931 li
414.27 74.2206 li
414.404 75.0273 li
414.537 75.9191 li
414.671 74.4118 li
414.805 75.1974 li
414.939 74.8782 li
415.073 75.876 li
415.207 75.0694 li
415.342 75.3246 li
415.475 75.4306 li
415.609 75.1124 li
415.743 74.9633 li
415.877 74.5179 li
416.01 74.7931 li
416.145 74.5389 li
416.279 76.2583 li
416.413 74.5819 li
416.547 74.2206 li
416.681 74.687 li
416.815 75.3666 li
416.948 75.0273 li
417.082 74.8782 li
417.216 75.7489 li
417.35 74.5179 li
417.484 74.9002 li
417.618 74.9212 li
417.752 74.7301 li
417.886 74.5389 li
418.02 74.9422 li
418.153 74.709 li
418.288 75.0273 li
418.421 74.709 li
418.555 74.5389 li
418.689 75.5147 li
418.824 74.8782 li
418.957 74.7511 li
419.092 75.0694 li
419.225 74.0084 li
419.359 74.9422 li
419.493 75.6428 li
419.627 74.8582 li
419.76 76.8728 li
419.895 76.0251 li
420.029 74.4958 li
420.163 74.7931 li
420.297 74.5599 li
420.43 74.4328 li
420.564 75.897 li
420.698 74.9633 li
420.832 75.1124 li
420.966 74.9633 li
421.1 75.2605 li
421.234 75.1974 li
421.368 74.603 li
421.502 75.3456 li
421.635 75.5788 li
421.77 75.0063 li
421.903 74.1786 li
422.038 74.709 li
422.171 74.5179 li
422.306 75.3666 li
422.44 75.1334 li
422.574 74.8361 li
422.707 76.0251 li
422.841 74.1786 li
422.975 72.7984 li
423.109 75.3666 li
423.243 74.0715 li
423.377 74.603 li
423.511 75.5147 li
423.645 74.5389 li
423.779 75.2395 li
423.913 74.9212 li
424.046 75.3025 li
424.18 74.3698 li
424.314 75.2185 li
424.448 75.0273 li
424.582 74.709 li
424.716 74.8361 li
424.85 74.645 li
424.984 74.0715 li
425.118 75.3246 li
425.251 74.4758 li
425.385 75.0483 li
425.52 75.3666 li
425.653 75.9401 li
425.787 74.3698 li
425.922 74.4958 li
426.056 74.687 li
426.19 74.9212 li
426.324 74.9633 li
426.457 74.1996 li
426.591 74.1356 li
426.725 74.3698 li
426.859 74.1786 li
426.993 78.6984 li
427.127 74.0515 li
427.261 75.6848 li
427.395 76.0672 li
427.529 74.4538 li
427.662 75.2395 li
427.796 73.8603 li
427.93 75.2815 li
428.064 75.2185 li
428.198 75.1334 li
428.332 74.5599 li
428.467 74.9843 li
428.6 75.2605 li
428.734 75.2605 li
428.868 76.0672 li
429.002 77.1071 li
429.135 74.2847 li
429.27 75.0273 li
429.404 74.603 li
429.538 74.624 li
429.672 74.1566 li
429.806 75.0273 li
429.939 74.9633 li
430.073 75.4306 li
430.207 74.8782 li
430.341 75.1334 li
430.475 75.0914 li
430.609 79.2719 li
430.743 74.2417 li
430.877 75.3025 li
431.011 74.7721 li
431.145 84.1109 li
431.278 75.9821 li
431.412 75.1544 li
431.546 74.5819 li
431.68 74.8782 li
431.814 74.9422 li
431.949 73.7963 li
432.082 74.4758 li
432.217 75.3456 li
432.349 75.7699 li
432.484 76.5336 li
432.618 74.7721 li
432.752 74.2847 li
432.885 74.5599 li
433.02 74.4328 li
433.154 75.1754 li
433.288 74.8582 li
433.422 73.9874 li
433.555 76.0031 li
433.689 74.8582 li
433.823 74.9843 li
433.957 75.3886 li
434.091 74.4538 li
434.225 75.1124 li
434.359 74.3267 li
434.493 74.2206 li
434.627 74.624 li
434.76 74.709 li
434.895 76.6186 li
435.028 74.645 li
435.162 74.7511 li
435.296 74.5819 li
435.431 75.7059 li
435.564 74.645 li
435.699 75.9401 li
435.832 74.7931 li
435.966 73.0536 li
436.1 74.2627 li
436.234 74.8582 li
436.368 75.2605 li
436.502 75.2605 li
436.636 75.4937 li
436.77 74.3057 li
436.904 74.1145 li
437.038 74.4758 li
437.171 75.0063 li
437.305 74.3698 li
437.439 74.8361 li
437.573 74.2206 li
437.707 75.2815 li
437.842 75.9191 li
437.975 73.6902 li
438.109 75.2185 li
438.243 75.0483 li
438.377 74.3477 li
438.51 75.2605 li
438.645 73.9874 li
438.778 74.5389 li
438.913 75.2815 li
439.047 74.7301 li
439.181 75.6848 li
439.314 74.709 li
439.448 75.1754 li
439.582 77.086 li
439.716 74.4538 li
439.85 74.645 li
439.984 74.7931 li
440.118 75.3246 li
440.252 75.1974 li
440.386 75.1754 li
440.52 76.2583 li
440.654 75.1334 li
440.787 75.5367 li
440.921 75.3246 li
441.055 74.645 li
441.189 75.2185 li
441.323 75.0273 li
441.457 73.7753 li
441.591 74.645 li
441.725 75.9611 li
441.858 73.7753 li
441.993 75.0483 li
442.127 75.2185 li
442.26 77.3833 li
442.395 75.5578 li
442.529 74.3477 li
442.663 74.9633 li
442.797 74.9212 li
442.931 74.5389 li
443.064 75.3246 li
443.198 74.7301 li
443.332 74.7511 li
443.466 74.9633 li
443.6 74.9212 li
443.734 75.2815 li
443.868 75.3886 li
444.002 75.0273 li
444.136 76.7037 li
444.269 75.1544 li
444.403 74.3057 li
444.537 74.8782 li
444.671 74.9002 li
444.805 75.4517 li
444.939 74.4328 li
445.074 74.9212 li
445.207 74.7301 li
445.341 74.0295 li
445.475 75.2395 li
445.609 73.9874 li
445.742 75.0694 li
445.877 75.1754 li
446.011 74.667 li
446.145 75.3025 li
446.279 74.1996 li
446.413 74.4118 li
446.547 75.3666 li
446.68 75.834 li
446.814 75.1334 li
446.948 74.687 li
447.082 74.645 li
447.216 74.9633 li
447.35 73.9234 li
447.484 74.8361 li
447.618 75.1124 li
447.752 74.4538 li
447.885 74.4328 li
448.02 74.8582 li
448.153 74.4328 li
448.287 74.5599 li
448.421 75.1754 li
448.556 72.8415 li
448.689 75.4517 li
448.824 74.2847 li
448.957 73.7322 li
449.091 75.0914 li
449.225 74.9212 li
449.359 74.603 li
449.492 75.4096 li
449.627 75.791 li
449.761 75.5578 li
449.895 74.7721 li
450.029 74.1786 li
450.163 75.1754 li
450.296 75.1124 li
450.43 74.5179 li
450.564 75.5367 li
450.698 74.4118 li
450.832 75.0273 li
450.966 74.5819 li
451.1 75.0273 li
451.234 74.4958 li
451.367 75.5788 li
451.502 74.709 li
451.635 74.7931 li
451.77 74.8582 li
451.903 74.8582 li
452.038 75.2185 li
452.172 74.667 li
452.306 75.5788 li
452.439 74.4958 li
452.574 74.0715 li
452.707 74.687 li
452.841 74.9633 li
452.975 75.0063 li
453.109 75.4096 li
453.243 74.645 li
453.377 74.2847 li
453.511 75.7059 li
453.645 75.0063 li
453.778 74.5389 li
453.912 75.4517 li
454.046 74.4758 li
454.18 75.2395 li
454.314 75.2395 li
454.449 75.3025 li
454.582 74.8361 li
454.716 75.4306 li
454.85 74.9212 li
454.983 75.1124 li
455.117 74.9212 li
455.252 74.9422 li
455.385 74.709 li
455.52 69.5087 li
455.654 75.3886 li
455.788 76.2163 li
455.922 74.1566 li
456.056 75.0273 li
456.189 74.5599 li
456.323 75.0483 li
456.457 75.1974 li
456.591 75.5367 li
456.725 75.791 li
456.859 75.0483 li
456.993 74.687 li
457.127 74.7301 li
457.261 75.5998 li
457.394 74.9002 li
457.528 75.2605 li
457.662 75.0914 li
457.796 75.2605 li
457.93 74.8151 li
458.064 75.0273 li
458.199 74.687 li
458.332 74.3698 li
458.466 74.3908 li
458.6 75.1754 li
458.734 74.4118 li
458.867 75.6848 li
459.002 74.8582 li
459.136 75.897 li
459.27 75.1754 li
459.404 74.3477 li
459.538 74.4118 li
459.672 73.8813 li
459.805 75.1124 li
459.939 75.0273 li
460.073 75.7699 li
460.207 74.8582 li
460.341 74.9212 li
460.475 75.1974 li
460.609 75.1544 li
460.743 74.687 li
460.876 75.4306 li
461.01 74.9633 li
461.144 75.791 li
461.278 75.0483 li
461.412 74.9212 li
461.546 75.2605 li
461.681 74.7301 li
461.814 74.8361 li
461.949 74.3477 li
462.083 74.709 li
462.216 74.3698 li
462.35 74.5389 li
462.484 74.7721 li
462.618 75.1124 li
462.752 77.8076 li
462.886 74.3477 li
463.02 74.7931 li
463.154 75.5367 li
463.287 74.7511 li
463.421 75.1974 li
463.555 74.5179 li
463.689 75.6848 li
463.823 75.1754 li
463.957 74.7511 li
464.091 75.5367 li
464.225 75.4937 li
464.359 74.9212 li
464.492 75.1544 li
464.627 75.0273 li
464.76 75.1974 li
464.894 74.7301 li
465.028 75.2395 li
465.163 75.4727 li
465.296 73.7753 li
465.431 74.8361 li
465.564 74.0515 li
465.698 75.0483 li
465.832 75.3246 li
465.966 74.667 li
466.1 75.0273 li
466.234 75.0483 li
466.368 75.1974 li
466.502 73.6692 li
466.636 75.7489 li
466.77 74.624 li
466.903 74.8361 li
467.037 75.1974 li
467.171 74.0084 li
467.305 76.0882 li
467.439 75.4937 li
467.574 74.645 li
467.707 74.9002 li
467.841 75.0914 li
467.975 75.3666 li
468.109 75.3025 li
468.242 73.9444 li
468.377 75.3246 li
468.51 74.5389 li
468.645 75.2185 li
468.779 75.7489 li
468.913 75.5788 li
469.046 75.3025 li
469.181 74.3908 li
469.314 75.2395 li
469.448 74.5819 li
469.582 74.4328 li
469.716 76.5766 li
469.85 75.4937 li
469.984 74.9843 li
470.118 74.667 li
470.252 75.0063 li
470.386 75.2605 li
470.519 74.645 li
470.653 72.268 li
470.787 75.4096 li
470.921 74.5819 li
471.055 74.3477 li
471.189 74.7301 li
471.324 74.7511 li
471.457 74.603 li
471.591 74.2627 li
471.725 74.9422 li
471.859 75.4727 li
471.992 74.9843 li
472.127 74.7301 li
472.261 74.5389 li
472.395 75.3666 li
472.529 75.1754 li
472.663 76.2373 li
472.797 75.1974 li
472.93 74.603 li
473.064 74.687 li
473.198 75.0483 li
473.332 75.3246 li
473.466 72.5442 li
473.6 74.624 li
473.734 74.8582 li
473.868 74.8361 li
474.002 74.5819 li
474.135 74.8361 li
474.269 75.2605 li
474.403 75.3666 li
474.537 75.2395 li
474.671 75.3456 li
474.806 75.3456 li
474.939 74.8361 li
475.073 74.603 li
475.207 74.1996 li
475.341 74.4758 li
475.475 75.9401 li
475.609 74.8361 li
475.743 75.897 li
475.877 75.2185 li
476.011 74.9843 li
476.145 74.1996 li
476.279 73.9024 li
476.412 75.834 li
476.546 74.2206 li
476.68 74.7931 li
476.814 74.8782 li
476.948 74.5179 li
477.082 76.4495 li
477.216 74.9843 li
477.35 74.5599 li
477.484 74.3908 li
477.617 74.4958 li
477.752 74.0935 li
477.885 74.9422 li
478.019 74.9422 li
478.153 74.1566 li
478.288 75.855 li
478.421 74.9843 li
478.556 74.9212 li
478.689 73.9874 li
478.823 73.8393 li
478.957 74.5599 li
479.091 74.4758 li
479.224 75.3246 li
479.359 75.4517 li
479.493 74.3477 li
479.627 74.709 li
479.761 75.2815 li
479.895 74.1996 li
480.028 75.2185 li
480.162 75.4937 li
480.296 75.2185 li
480.43 75.0063 li
480.564 73.52 li
480.698 76.9159 li
480.832 75.3666 li
480.966 74.9212 li
481.1 74.687 li
481.234 74.4758 li
481.367 72.4592 li
481.502 74.9843 li
481.635 74.8582 li
481.77 74.1996 li
481.904 74.7511 li
482.038 73.7112 li
482.171 74.709 li
482.306 74.603 li
482.439 75.4306 li
482.573 75.4727 li
482.707 74.4958 li
482.841 75.3456 li
482.975 75.0273 li
483.109 75.1974 li
483.243 75.5147 li
483.377 74.9422 li
483.51 74.7301 li
483.644 74.4118 li
483.778 74.709 li
483.912 75.6848 li
484.046 76.3424 li
484.181 75.3025 li
484.314 74.8582 li
484.448 75.3886 li
484.582 75.3025 li
484.716 75.0694 li
484.849 74.7301 li
484.984 75.4937 li
485.117 74.7511 li
485.252 74.5599 li
485.386 74.4118 li
485.52 75.6428 li
485.654 75.855 li
485.788 74.8151 li
485.921 74.687 li
486.055 74.3908 li
486.189 75.5788 li
486.323 74.9843 li
486.457 74.2627 li
486.591 74.9633 li
486.725 75.1334 li
486.859 75.2185 li
486.993 75.3886 li
487.126 75.4517 li
487.26 87.0604 li
487.394 74.3908 li
487.528 74.9212 li
487.662 73.6481 li
487.796 75.4727 li
487.931 75.4306 li
488.064 75.7279 li
488.198 75.1754 li
488.332 74.8782 li
488.466 74.8782 li
488.599 75.3025 li
488.734 74.3908 li
488.868 74.3477 li
489.002 75.3025 li
489.136 74.8151 li
489.27 75.1124 li
489.404 74.8361 li
489.537 74.667 li
489.671 75.2605 li
489.805 75.1544 li
489.939 74.8361 li
490.073 74.7931 li
490.207 75.2395 li
490.341 75.6218 li
490.475 75.2395 li
490.609 75.3666 li
490.742 74.8782 li
490.876 76.1092 li
491.01 74.9633 li
491.144 74.7301 li
491.279 72.4171 li
491.413 75.1334 li
491.546 74.667 li
491.681 75.1544 li
491.815 73.9654 li
491.948 74.4958 li
492.082 74.645 li
492.216 75.3246 li
492.35 75.5147 li
492.484 75.4937 li
492.618 74.1786 li
492.752 75.2185 li
492.886 74.9212 li
493.02 74.7301 li
493.153 73.9654 li
493.287 75.4517 li
493.421 75.0063 li
493.555 75.1544 li
493.689 74.3057 li
493.823 75.1124 li
493.957 75.791 li
494.091 74.8782 li
494.224 75.6218 li
494.359 75.5367 li
494.492 75.0483 li
494.626 74.8582 li
494.76 75.0694 li
494.895 73.8173 li
495.028 74.9002 li
495.163 74.709 li
495.296 74.0515 li
495.43 75.2395 li
495.564 75.1124 li
495.698 74.4538 li
495.832 74.709 li
495.966 75.0914 li
496.1 75.1754 li
496.234 74.9212 li
496.368 75.0063 li
496.502 75.2395 li
496.635 75.4937 li
496.769 75.9821 li
496.903 75.1974 li
497.037 74.624 li
497.171 74.9002 li
497.306 74.1145 li
497.439 76.3854 li
497.573 74.624 li
497.707 74.9002 li
497.841 74.8151 li
497.974 73.6481 li
498.109 75.1754 li
498.242 75.0483 li
498.377 75.2185 li
498.511 74.687 li
498.645 74.2417 li
498.778 75.2395 li
498.913 74.709 li
499.046 74.9422 li
499.18 76.1302 li
499.314 74.3267 li
499.448 74.9002 li
499.582 75.0483 li
499.716 75.2605 li
499.85 74.3477 li
499.984 76.2583 li
500.118 75.0694 li
500.251 74.8582 li
500.385 75.3456 li
500.519 74.7721 li
500.653 75.9611 li
500.787 74.7721 li
500.921 75.5788 li
501.056 74.0715 li
501.189 75.5788 li
501.323 75.0914 li
501.457 75.0914 li
501.591 74.1356 li
501.724 75.4096 li
501.859 74.2627 li
501.993 42.8103 li
502.127 75.1754 li
502.261 74.9422 li
502.395 75.5788 li
502.529 73.3719 li
502.662 76.0031 li
502.796 73.8603 li
502.93 75.0694 li
503.064 75.6428 li
503.198 74.8361 li
503.332 74.0935 li
503.466 74.8782 li
503.6 74.4328 li
503.734 74.645 li
503.867 74.4118 li
504.001 74.2417 li
504.135 74.687 li
504.269 74.1566 li
504.403 74.709 li
504.538 73.7542 li
504.671 74.8582 li
504.806 74.8361 li
504.94 74.4958 li
505.073 75.2815 li
505.207 74.5819 li
505.341 74.7721 li
505.475 74.667 li
505.609 76.1733 li
505.743 74.2206 li
505.877 74.7301 li
506.011 70.4855 li
506.144 73.7322 li
506.278 74.8582 li
506.412 74.9422 li
506.546 74.9633 li
506.68 74.5819 li
506.814 74.8782 li
506.948 74.0515 li
507.082 75.4727 li
507.216 75.2815 li
507.349 75.0483 li
507.484 74.667 li
507.617 75.5998 li
507.751 75.6428 li
507.886 75.0273 li
508.02 74.9633 li
508.153 74.3477 li
508.288 74.7511 li
508.421 75.1544 li
508.555 75.5147 li
508.689 74.9002 li
508.823 74.687 li
508.957 75.2815 li
509.091 74.5389 li
509.225 74.9633 li
509.359 74.624 li
509.493 74.7721 li
509.627 72.6073 li
509.76 74.709 li
509.894 75.2395 li
510.028 91.2209 li
510.162 73.3079 li
510.296 75.5788 li
510.43 73.3929 li
510.564 75.5367 li
510.698 74.9002 li
510.832 71.5254 li
510.966 75.3025 li
511.099 74.645 li
511.234 75.0483 li
511.367 74.9843 li
511.502 74.687 li
511.636 74.7511 li
511.77 75.3246 li
511.903 74.0515 li
512.038 74.709 li
512.171 75.0694 li
512.305 80.6941 li
512.439 75.2605 li
512.573 75.4096 li
512.707 74.0515 li
512.841 74.3477 li
512.975 75.4727 li
513.109 75.9401 li
513.243 75.0063 li
513.376 75.0914 li
513.51 75.3666 li
513.644 73.8603 li
513.778 74.624 li
513.913 76.4495 li
514.046 75.2815 li
514.18 75.5147 li
514.314 75.3666 li
514.449 75.0914 li
514.581 75.3025 li
514.716 75.0483 li
514.849 74.4538 li
514.984 74.9002 li
515.118 75.3246 li
515.252 75.0914 li
515.386 74.4328 li
515.52 74.3908 li
515.654 75.1124 li
515.787 74.7301 li
515.921 75.0694 li
516.055 74.4958 li
516.189 75.1334 li
516.323 74.687 li
516.457 74.8151 li
516.591 75.2605 li
516.725 74.5819 li
516.858 75.834 li
516.992 74.3908 li
517.126 73.8813 li
517.26 74.7931 li
517.394 74.687 li
517.528 74.9422 li
517.663 74.4538 li
517.796 74.7301 li
517.93 75.1124 li
518.065 74.603 li
518.198 75.5147 li
518.331 75.2185 li
518.466 74.9002 li
518.6 74.687 li
518.734 76.0251 li
518.868 75.0483 li
519.002 73.7542 li
519.136 75.4306 li
519.269 74.8151 li
519.403 74.9633 li
519.537 74.9002 li
519.671 75.0694 li
519.805 74.3698 li
519.939 75.9401 li
520.073 74.7511 li
520.207 74.2206 li
520.341 75.0273 li
520.474 75.4727 li
520.609 74.1996 li
520.742 75.3246 li
520.876 75.1754 li
521.011 74.3057 li
521.145 72.5652 li
521.278 74.9843 li
521.413 70.9949 li
521.547 74.4758 li
521.68 74.2206 li
521.814 74.7301 li
521.948 74.624 li
522.082 74.3057 li
522.216 75.1974 li
522.35 75.2185 li
522.484 75.1754 li
522.618 74.5179 li
522.752 74.9843 li
522.885 75.4096 li
523.019 73.9234 li
523.153 73.9654 li
523.287 75.1334 li
523.421 74.0715 li
523.555 75.3666 li
523.689 75.4937 li
523.823 75.3025 li
523.957 75.7699 li
524.091 75.1544 li
524.224 75.0273 li
524.358 74.9843 li
524.492 75.6638 li
524.627 74.8151 li
524.761 75.1544 li
524.895 75.1334 li
525.028 75.2815 li
525.163 74.3477 li
525.296 75.2395 li
525.43 75.4306 li
525.564 75.2605 li
525.698 74.667 li
525.832 74.2206 li
525.966 75.4096 li
526.1 75.3246 li
526.234 74.4328 li
526.367 75.2605 li
526.501 74.2417 li
526.635 75.1124 li
526.769 75.4306 li
526.903 75.3456 li
527.038 74.7721 li
527.171 74.4958 li
527.305 74.8361 li
527.439 75.5147 li
527.573 74.2627 li
527.706 75.0273 li
527.841 74.0295 li
527.974 73.5841 li
528.109 75.7699 li
528.243 75.0914 li
528.377 76.2583 li
528.51 74.2206 li
528.645 75.0483 li
528.779 74.9633 li
528.912 73.9024 li
529.046 76.0882 li
529.18 75.1754 li
529.314 75.0694 li
529.448 74.8582 li
529.582 75.2605 li
529.716 75.3246 li
529.85 75.3666 li
529.984 74.9422 li
530.117 74.603 li
530.251 75.1124 li
530.385 75.0063 li
530.519 74.5819 li
530.653 75.0914 li
530.788 74.1356 li
530.921 75.0694 li
531.055 74.5389 li
531.189 75.5578 li
531.323 74.4958 li
531.456 76.6827 li
531.591 74.9422 li
531.725 75.0483 li
531.859 74.3698 li
531.993 74.5819 li
532.127 74.5819 li
532.261 74.3267 li
532.394 74.9212 li
532.528 75.1754 li
532.662 76.1302 li
532.796 75.6848 li
532.93 74.4328 li
533.064 75.6428 li
533.198 75.0273 li
533.332 75.5367 li
533.466 75.4517 li
533.599 75.1334 li
533.733 74.3698 li
533.867 74.4958 li
534.001 75.2185 li
534.135 74.9633 li
534.27 74.9002 li
534.403 74.7301 li
534.538 75.3025 li
534.672 74.709 li
534.805 74.8151 li
534.939 75.3025 li
535.073 75.2815 li
535.207 74.7721 li
535.341 74.8782 li
535.475 74.8151 li
535.609 76.3424 li
535.743 74.687 li
535.877 75.6638 li
536.01 73.7112 li
536.144 74.7931 li
536.278 74.7301 li
536.412 74.7721 li
536.546 74.7721 li
536.68 74.8361 li
536.814 75.0483 li
536.948 76.1733 li
537.082 75.1754 li
537.216 75.5147 li
537.349 75.1974 li
537.483 74.667 li
537.618 74.9843 li
537.752 74.0935 li
537.885 75.3886 li
538.02 74.5179 li
538.154 75.0694 li
538.288 75.4096 li
538.421 74.3057 li
538.555 75.3246 li
538.689 75.1754 li
538.823 74.4758 li
538.957 75.3456 li
539.091 75.2605 li
539.225 74.0935 li
539.359 76.9159 li
539.492 74.5389 li
539.626 75.5367 li
539.76 75.2185 li
539.894 76.0251 li
540.028 75.4306 li
540.162 74.0715 li
540.296 74.3908 li
540.43 75.6848 li
540.564 75.0063 li
540.698 74.8582 li
540.831 75.3456 li
540.966 74.4118 li
541.099 75.2605 li
541.234 74.645 li
541.368 75.2605 li
541.502 74.4538 li
541.635 75.5578 li
541.77 74.5179 li
541.903 75.3025 li
542.037 73.9444 li
542.171 75.2815 li
542.305 75.2185 li
542.439 73.6692 li
542.573 75.9191 li
542.707 74.8782 li
542.841 74.709 li
542.975 75.4096 li
543.108 74.9843 li
543.242 74.667 li
543.376 74.8361 li
543.51 74.9212 li
543.645 75.3666 li
543.778 74.8782 li
543.912 74.667 li
544.046 75.1124 li
544.181 74.603 li
544.313 75.0914 li
544.448 74.3477 li
544.581 74.3477 li
544.716 74.9002 li
544.85 74.7931 li
544.984 75.0914 li
545.118 75.1124 li
545.252 75.834 li
545.386 74.624 li
545.519 75.1974 li
545.653 74.4328 li
545.787 75.4727 li
545.921 74.5819 li
546.055 75.1974 li
546.189 74.7931 li
546.323 74.4328 li
546.457 74.3698 li
546.591 73.457 li
546.724 75.0694 li
546.858 74.3477 li
546.992 74.624 li
547.126 75.3246 li
547.26 75.4517 li
547.395 74.5389 li
547.528 75.791 li
547.662 75.0063 li
547.797 75.1334 li
547.93 74.8151 li
548.063 75.1974 li
548.198 74.3908 li
548.332 74.7721 li
548.466 77.4463 li
548.6 75.0694 li
548.734 74.7301 li
548.868 75.1334 li
549.002 74.9843 li
549.135 73.8393 li
549.269 74.8582 li
549.403 75.3456 li
549.537 75.0694 li
549.671 74.1786 li
549.805 72.9255 li
549.939 75.0273 li
550.073 75.4517 li
550.206 75.2395 li
550.341 74.2206 li
550.474 73.2868 li
550.608 74.2847 li
550.743 75.0063 li
550.877 75.834 li
551.01 75.1544 li
551.145 74.603 li
551.279 75.1974 li
551.412 75.0273 li
551.546 75.0063 li
551.68 75.3886 li
551.814 73.9024 li
551.948 74.8151 li
552.082 73.9654 li
552.216 74.603 li
552.35 74.9002 li
552.484 75.3246 li
552.617 74.687 li
552.751 75.3666 li
552.885 74.9002 li
553.019 74.7931 li
553.153 79.7813 li
553.287 74.709 li
553.421 74.5819 li
553.555 74.0515 li
553.689 75.2605 li
553.823 75.4096 li
553.956 75.1544 li
554.091 74.7721 li
554.224 74.645 li
554.359 74.709 li
554.493 74.9843 li
554.627 74.9212 li
554.76 75.1974 li
554.895 76.0251 li
555.028 73.7753 li
555.162 74.4758 li
555.296 75.2605 li
555.43 75.2395 li
555.564 75.4517 li
555.698 74.5389 li
555.832 74.9212 li
555.966 75.3246 li
556.1 74.4328 li
556.233 71.9918 li
556.367 75.3666 li
556.501 74.5819 li
556.635 75.1754 li
556.77 74.3477 li
556.903 75.2395 li
557.037 74.9843 li
557.171 71.9918 li
557.306 75.2605 li
557.438 75.6848 li
557.573 74.667 li
557.706 74.2627 li
557.841 75.5788 li
557.975 75.3456 li
558.109 74.9422 li
558.243 74.2206 li
558.377 75.1334 li
558.51 75.1754 li
558.644 74.2847 li
558.778 74.4538 li
558.912 75.7699 li
559.046 74.1566 li
559.18 74.5179 li
559.314 74.9422 li
559.448 75.2815 li
559.582 73.5841 li
559.716 74.5819 li
559.849 75.1334 li
559.983 75.3025 li
560.117 75.5367 li
560.252 75.2185 li
560.385 74.7931 li
560.52 75.3666 li
560.653 75.0483 li
560.788 73.2658 li
560.922 75.0694 li
561.055 75.5578 li
561.188 74.2417 li
561.323 74.8361 li
561.457 74.7301 li
561.591 75.4096 li
561.725 74.9633 li
561.859 75.5578 li
561.993 75.791 li
562.126 75.7489 li
562.26 75.2605 li
562.394 75.1334 li
562.528 76.7247 li
562.662 75.3246 li
562.796 74.7931 li
562.93 74.5819 li
563.064 74.4118 li
563.198 75.3886 li
563.331 74.9002 li
563.465 75.834 li
563.599 74.7511 li
563.733 74.4758 li
563.867 75.1754 li
564.002 74.645 li
564.135 74.7931 li
564.27 75.2605 li
564.404 76.1092 li
564.537 75.0273 li
564.671 74.709 li
564.805 74.687 li
564.939 75.7699 li
565.073 75.1544 li
565.207 74.9212 li
565.341 75.1974 li
565.475 74.9843 li
565.609 74.8782 li
565.742 75.4727 li
565.876 75.2395 li
566.01 75.2605 li
566.144 74.9002 li
566.278 75.5367 li
566.412 73.2658 li
566.546 74.5819 li
566.68 75.1974 li
566.814 74.709 li
566.948 75.1544 li
567.081 75.1754 li
567.215 76.2163 li
567.35 73.3929 li
567.484 73.3289 li
567.617 75.5998 li
567.752 75.3025 li
567.886 73.8393 li
568.02 74.4758 li
568.153 74.8361 li
568.287 74.8151 li
568.421 75.3025 li
568.555 75.5998 li
568.689 73.0747 li
568.823 75.1754 li
568.957 76.1092 li
569.091 75.5147 li
569.225 74.8361 li
569.358 74.7721 li
569.492 74.2627 li
569.626 75.0483 li
569.76 75.7279 li
569.895 74.1566 li
570.028 74.9002 li
570.162 75.2815 li
570.296 74.0935 li
570.43 75.3666 li
570.563 75.6848 li
570.698 74.8151 li
570.831 75.1754 li
570.966 75.4096 li
571.1 74.8782 li
571.234 74.8782 li
571.367 75.0273 li
571.502 75.0694 li
571.635 74.2417 li
571.769 75.1754 li
571.903 75.5578 li
572.037 73.6261 li
572.171 73.499 li
572.305 74.5819 li
572.439 75.1334 li
572.573 74.4118 li
572.707 76.9589 li
572.84 75.4727 li
572.974 73.8813 li
573.108 75.1974 li
573.242 75.1754 li
573.377 75.3666 li
573.51 75.3666 li
573.644 74.7511 li
573.778 75.7279 li
573.913 73.8603 li
574.047 75.1124 li
574.18 74.7511 li
574.313 74.2627 li
574.448 75.6638 li
574.582 74.667 li
574.716 75.4306 li
574.85 74.7301 li
574.984 76.0031 li
575.118 75.1124 li
575.251 75.6428 li
575.385 75.7279 li
575.519 74.5599 li
575.653 74.9002 li
575.787 75.1334 li
575.921 75.1124 li
576.055 74.1145 li
576.189 74.7931 li
576.323 74.3267 li
576.456 74.5599 li
576.59 75.4306 li
576.724 74.709 li
576.858 75.1544 li
576.992 74.687 li
577.127 75.1334 li
/1 
[/DeviceCMYK] /CSA add_res
.875212 .526787 .00390631 .000823987 cmyk
15.0126 lw
0 lc
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.403 198.986 mo
560.545 198.986 li
560.545 103.254 li
294.403 103.254 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
294.404 198.986 mo
560.546 198.986 li
1 /0 /CSD get_res sepcs
.851074 sep
5.00561 lw
2 lc
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.404 103.254 mo
560.546 103.254 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
361.45 198.986 mo
361.45 196.32 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
435.379 198.986 mo
435.379 196.32 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
509.307 198.986 mo
509.307 196.32 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
361.45 103.254 mo
361.45 105.92 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
435.379 103.254 mo
435.379 105.92 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
509.307 103.254 mo
509.307 105.92 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DWBJAN+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DWBJAN+Helvetica /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/DWBJAN+Helvetica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero 
/one /two 5{/.notdef}rp /eight 8{/.notdef}rp /A 18{/.notdef}rp /T 
15{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 
2{/.notdef}rp /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [9.9998 0 0 -10.0166 0 0 ]msf
351.594 213.296 mo
(0.08)sh
428.308 213.296 mo
(0.1)sh
499.451 213.296 mo
(0.12)sh
294.404 198.986 mo
294.404 103.254 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
560.546 198.986 mo
560.546 103.254 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.404 176.311 mo
297.065 176.311 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.404 153.007 mo
297.065 153.007 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.404 129.703 mo
297.065 129.703 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.404 106.399 mo
297.065 106.399 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
560.546 176.311 mo
557.884 176.311 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
560.546 153.007 mo
557.884 153.007 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
560.546 129.703 mo
557.884 129.703 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
560.546 106.399 mo
557.884 106.399 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DWBJAN+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DWBJAN+Helvetica /Encoding get
dup 52 /four put
dup 54 /six put
pop
%ADOEndSubsetFont
/DWBJAN+Helvetica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero 
/one /two /.notdef /four /.notdef /six /.notdef /eight 
8{/.notdef}rp /A 18{/.notdef}rp /T 15{/.notdef}rp /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m 2{/.notdef}rp /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [9.9998 0 0 -10.0166 0 0 ]msf
284.833 180.175 mo
(0)sh
270.691 156.871 mo
(0.02)sh
270.691 133.567 mo
(0.04)sh
270.691 110.263 mo
(0.06)sh
294.372 177.866 mo
294.452 176.666 li
294.684 175.422 li
294.915 175.635 li
295.146 176.702 li
295.376 176.275 li
295.607 176.631 li
295.838 176.596 li
296.07 173.751 li
296.301 175.564 li
296.532 175.173 li
296.762 176.24 li
296.994 177.057 li
297.225 175.529 li
297.456 176.987 li
297.687 175.92 li
297.918 176.737 li
298.149 177.235 li
298.38 176.631 li
298.611 175.457 li
298.843 176.809 li
299.073 176.133 li
299.304 175.884 li
299.535 175.244 li
299.767 176.133 li
299.998 175.955 li
300.228 176.453 li
300.459 175.173 li
300.69 176.773 li
300.921 175.92 li
301.153 176.453 li
301.383 176.844 li
301.614 177.911 li
301.845 175.991 li
302.077 176.809 li
302.308 175.529 li
302.538 176.631 li
302.769 176.311 li
303.001 176.666 li
303.232 176.382 li
303.463 176.56 li
303.694 176.311 li
303.924 174.746 li
304.156 177.306 li
304.387 176.098 li
304.618 175.884 li
304.849 177.911 li
305.079 176.596 li
305.31 176.453 li
305.542 174.995 li
305.773 175.6 li
306.004 177.164 li
306.235 176.987 li
306.466 178.337 li
306.697 175.635 li
306.928 177.698 li
307.159 176.275 li
307.39 176.702 li
307.621 176.311 li
307.852 174.853 li
308.083 175.422 li
308.314 178.516 li
308.544 176.88 li
308.776 176.489 li
309.007 177.128 li
309.239 173.751 li
309.47 176.346 li
309.7 176.524 li
309.931 175.351 li
310.162 176.311 li
310.393 175.28 li
310.625 175.991 li
310.855 176.951 li
311.086 178.124 li
311.317 176.809 li
311.548 176.453 li
311.78 177.733 li
312.011 175.208 li
312.241 175.208 li
312.472 174.248 li
312.704 176.311 li
312.935 176.773 li
313.166 176.453 li
313.396 175.707 li
313.627 176.062 li
313.859 176.844 li
314.09 176.631 li
314.321 176.844 li
314.551 176.809 li
314.783 177.2 li
315.014 177.164 li
315.245 176.987 li
315.476 176.098 li
315.707 175.635 li
315.938 177.484 li
316.169 176.915 li
316.4 176.133 li
316.631 176.275 li
316.862 177.271 li
317.093 175.671 li
317.324 175.778 li
317.556 177.804 li
317.787 174.817 li
318.017 175.6 li
318.248 177.342 li
318.479 175.564 li
318.71 176.417 li
318.942 176.56 li
319.173 176.702 li
319.403 177.733 li
319.634 175.208 li
319.865 175.066 li
320.097 174.675 li
320.328 176.204 li
320.558 177.413 li
320.79 177.378 li
321.021 176.24 li
321.252 176.204 li
321.483 176.702 li
321.713 175.173 li
321.945 175.564 li
322.176 176.987 li
322.407 177.804 li
322.638 177.235 li
322.868 179.76 li
323.099 176.844 li
323.331 106.188 li
323.562 175.707 li
323.793 176.275 li
324.024 177.2 li
324.255 175.884 li
324.486 175.564 li
324.717 175.991 li
324.948 176.844 li
325.179 177.591 li
325.41 175.991 li
325.641 175.848 li
325.872 176.915 li
326.103 176.346 li
326.333 178.124 li
326.565 177.378 li
326.796 177.342 li
327.027 175.742 li
327.258 176.524 li
327.489 180.258 li
327.72 177.235 li
327.951 174.924 li
328.182 176.915 li
328.414 176.169 li
328.645 175.493 li
328.875 176.773 li
329.106 177.449 li
329.337 175.244 li
329.569 175.635 li
329.8 176.56 li
330.03 177.093 li
330.261 176.702 li
330.493 178.978 li
330.724 177.057 li
330.955 176.169 li
331.185 176.631 li
331.416 177.555 li
331.648 176.169 li
331.879 177.093 li
332.11 176.56 li
332.341 175.635 li
332.572 176.702 li
332.803 177.306 li
333.034 177.982 li
333.265 176.382 li
333.496 173.573 li
333.727 176.346 li
333.958 176.951 li
334.189 174.889 li
334.42 175.457 li
334.652 176.062 li
334.882 177.235 li
335.113 177.022 li
335.345 176.275 li
335.576 166.248 li
335.807 175.742 li
336.037 177.946 li
336.268 175.635 li
336.5 176.204 li
336.731 176.453 li
336.962 176.524 li
337.192 175.208 li
337.423 176.88 li
337.654 175.991 li
337.886 176.737 li
338.117 176.382 li
338.347 175.066 li
338.578 176.417 li
338.81 177.84 li
339.041 176.382 li
339.272 177.733 li
339.502 175.884 li
339.734 177.022 li
339.965 174.889 li
340.196 176.631 li
340.427 177.093 li
340.657 175.6 li
340.888 176.417 li
341.12 175.848 li
341.351 175.92 li
341.582 177.84 li
341.813 176.631 li
342.043 175.991 li
342.275 176.596 li
342.506 176.311 li
342.737 176.133 li
342.969 175.208 li
343.199 176.56 li
343.43 177.804 li
343.661 175.92 li
343.892 174.284 li
344.124 176.062 li
344.354 177.128 li
344.585 176.56 li
344.816 176.773 li
345.047 176.346 li
345.278 175.671 li
345.509 176.382 li
345.74 177.591 li
345.971 176.062 li
346.202 175.564 li
346.434 175.955 li
346.664 175.778 li
346.895 175.991 li
347.126 176.311 li
347.358 176.382 li
347.589 174.391 li
347.819 175.066 li
348.05 175.991 li
348.282 176.987 li
348.513 175.742 li
348.744 179.191 li
348.974 177.093 li
349.205 176.311 li
349.437 176.596 li
349.668 175.635 li
349.899 176.026 li
350.13 176.169 li
350.361 178.089 li
350.592 176.062 li
350.823 176.169 li
351.054 175.671 li
351.286 176.169 li
351.516 177.662 li
351.747 177.164 li
351.978 175.742 li
352.209 176.631 li
352.441 176.56 li
352.671 176.951 li
352.902 176.702 li
353.133 177.057 li
353.364 175.493 li
353.596 176.133 li
353.826 176.346 li
354.057 176.311 li
354.289 175.955 li
354.52 177.128 li
354.751 174.142 li
354.981 177.698 li
355.212 177.022 li
355.443 177.52 li
355.675 176.311 li
355.906 175.102 li
356.136 174.924 li
356.367 176.275 li
356.598 175.529 li
356.829 175.137 li
357.061 175.066 li
357.292 177.591 li
357.523 176.809 li
357.754 176.275 li
357.985 175.778 li
358.216 175.422 li
358.447 175.671 li
358.678 175.28 li
358.909 176.311 li
359.14 175.955 li
359.371 176.062 li
359.602 176.987 li
359.832 178.764 li
360.064 175.707 li
360.295 176.026 li
360.526 175.6 li
360.757 175.564 li
360.987 175.635 li
361.219 174.782 li
361.45 175.707 li
361.681 176.133 li
361.913 175.884 li
362.143 175.102 li
362.374 175.671 li
362.605 176.56 li
362.836 177.128 li
363.067 176.524 li
363.298 176.417 li
363.529 177.271 li
363.76 175.28 li
363.991 176.987 li
364.223 175.315 li
364.453 178.373 li
364.684 175.6 li
364.915 175.6 li
365.147 175.707 li
365.378 176.098 li
365.608 176.133 li
365.839 176.737 li
366.071 176.062 li
366.302 179.334 li
366.533 176.702 li
366.764 176.453 li
366.995 176.24 li
367.226 175.955 li
367.457 176.666 li
367.688 176.88 li
367.919 175.884 li
368.149 175.778 li
368.381 176.24 li
368.612 175.315 li
368.844 175.884 li
369.075 177.022 li
369.305 174.995 li
369.536 175.991 li
369.767 176.631 li
369.998 177.555 li
370.23 176.098 li
370.46 176.773 li
370.691 174.284 li
370.922 176.417 li
371.153 176.88 li
371.384 175.493 li
371.615 180.116 li
371.846 175.884 li
372.077 175.6 li
372.309 176.382 li
372.54 176.098 li
372.771 175.813 li
373.001 176.702 li
373.232 174.604 li
373.464 176.915 li
373.695 176.169 li
373.926 175.386 li
374.156 176.169 li
374.387 176.56 li
374.619 175.493 li
374.85 178.302 li
375.081 175.707 li
375.311 176.311 li
375.542 176.311 li
375.773 177.484 li
376.005 178.729 li
376.236 175.564 li
376.467 179.795 li
376.698 176.133 li
376.929 176.24 li
377.16 176.56 li
377.391 176.204 li
377.621 176.24 li
377.853 177.555 li
378.084 177.982 li
378.315 174.959 li
378.546 175.066 li
378.776 175.102 li
379.008 176.098 li
379.239 177.591 li
379.47 176.062 li
379.702 176.311 li
379.932 174.071 li
380.163 175.28 li
380.394 175.884 li
380.625 176.453 li
380.856 178.231 li
381.088 177.306 li
381.318 178.053 li
381.549 177.769 li
381.78 176.88 li
382.012 175.848 li
382.243 176.524 li
382.473 175.813 li
382.704 176.346 li
382.936 175.315 li
383.167 176.098 li
383.398 175.955 li
383.628 176.169 li
383.86 175.778 li
384.091 175.813 li
384.322 176.311 li
384.553 175.422 li
384.784 176.311 li
385.015 176.098 li
385.246 175.813 li
385.477 177.093 li
385.708 177.378 li
385.938 175.493 li
386.17 176.951 li
386.401 176.169 li
386.632 176.275 li
386.863 176.098 li
387.094 175.422 li
387.325 175.529 li
387.556 176.382 li
387.787 176.915 li
388.019 174.498 li
388.25 177.342 li
388.48 177.52 li
388.711 176.809 li
388.942 175.742 li
389.174 177.128 li
389.405 176.453 li
389.635 175.529 li
389.866 176.596 li
390.097 176.773 li
390.328 175.884 li
390.56 177.093 li
390.79 176.311 li
391.021 175.991 li
391.253 176.844 li
391.484 175.351 li
391.715 176.382 li
391.945 177.164 li
392.176 175.351 li
392.408 175.955 li
392.639 177.164 li
392.87 175.991 li
393.1 177.093 li
393.331 177.662 li
393.562 176.702 li
393.794 176.133 li
394.025 176.596 li
394.256 176.133 li
394.487 178.018 li
394.718 176.453 li
394.949 176.24 li
395.18 176.631 li
395.41 176.987 li
395.642 174.498 li
395.873 178.693 li
396.104 177.733 li
396.335 176.204 li
396.566 175.813 li
396.797 174.782 li
397.028 176.346 li
397.259 176.737 li
397.49 178.373 li
397.722 176.844 li
397.952 177.591 li
398.183 176.596 li
398.414 175.848 li
398.645 175.493 li
398.877 176.204 li
399.107 175.28 li
399.338 177.591 li
399.569 176.098 li
399.801 176.062 li
400.032 176.24 li
400.262 175.351 li
400.493 175.742 li
400.725 176.133 li
400.956 176.809 li
401.187 175.351 li
401.417 175.884 li
401.649 176.631 li
401.88 177.093 li
402.111 187.832 li
402.342 176.596 li
402.573 175.102 li
402.804 176.524 li
403.035 175.635 li
403.266 179.689 li
403.497 175.742 li
403.728 176.062 li
403.959 176.24 li
404.19 175.813 li
404.421 178.516 li
404.652 176.453 li
404.883 176.204 li
405.114 177.591 li
405.345 176.311 li
405.576 176.631 li
405.808 176.737 li
406.039 175.422 li
406.269 176.098 li
406.5 176.133 li
406.731 177.2 li
406.963 175.244 li
407.194 174.498 li
407.424 174.462 li
407.655 177.698 li
407.886 176.489 li
408.117 176.809 li
408.349 175.351 li
408.579 176.631 li
408.81 176.169 li
409.041 176.133 li
409.273 176.275 li
409.504 176.631 li
409.734 175.742 li
409.965 176.098 li
410.197 176.596 li
410.428 176.169 li
410.659 176.737 li
410.889 175.92 li
411.12 174.995 li
411.351 176.062 li
411.583 176.702 li
411.814 176.133 li
412.044 175.671 li
412.275 178.16 li
412.506 176.311 li
412.738 176.169 li
412.969 176.56 li
413.2 176.88 li
413.431 178.373 li
413.662 176.204 li
413.893 177.057 li
414.124 175.991 li
414.355 176.88 li
414.586 176.382 li
414.817 177.449 li
415.048 176.062 li
415.279 175.813 li
415.511 176.631 li
415.741 175.564 li
415.972 177.306 li
416.203 176.311 li
416.435 176.098 li
416.666 174.782 li
416.896 176.773 li
417.127 176.809 li
417.358 176.275 li
417.59 175.066 li
417.821 177.057 li
418.051 176.809 li
418.282 176.88 li
418.514 179.049 li
418.745 175.635 li
418.976 175.493 li
419.207 177.093 li
419.437 175.92 li
419.669 175.778 li
419.9 176.524 li
420.131 175.955 li
420.363 176.026 li
420.593 177.804 li
420.824 176.026 li
421.055 176.275 li
421.286 172.755 li
421.518 174.995 li
421.748 176.026 li
421.979 175.315 li
422.21 177.627 li
422.441 176.453 li
422.672 176.098 li
422.903 176.915 li
423.134 173.501 li
423.365 175.742 li
423.596 176.311 li
423.827 176.24 li
424.058 177.662 li
424.289 176.88 li
424.52 175.778 li
424.752 177.484 li
424.983 177.057 li
425.213 175.991 li
425.444 176.809 li
425.675 176.417 li
425.906 177.342 li
426.138 177.164 li
426.369 178.053 li
426.599 176.631 li
426.83 175.778 li
427.061 174 li
427.293 178.124 li
427.524 176.809 li
427.754 175.28 li
427.986 175.137 li
428.217 175.991 li
428.448 175.635 li
428.679 176.24 li
428.909 180.756 li
429.14 176.56 li
429.372 176.24 li
429.603 175.778 li
429.834 175.778 li
430.064 175.813 li
430.295 176.737 li
430.527 176.311 li
430.758 176.098 li
430.989 174.817 li
431.22 177.128 li
431.451 178.409 li
431.682 175.92 li
431.913 174.426 li
432.144 176.666 li
432.375 176.24 li
432.606 175.955 li
432.837 176.346 li
433.068 175.066 li
433.3 177.342 li
433.53 177.164 li
433.761 176.133 li
433.992 176.631 li
434.223 177.2 li
434.455 176.489 li
434.479 198.998 li
.875212 .526787 .00390631 .000823987 cmyk
20.0182 lw
0 lc
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
434.891 198.998 mo
434.916 176.311 li
435.148 176.844 li
435.379 174.746 li
435.61 175.6 li
435.841 175.315 li
436.071 175.848 li
436.303 175.529 li
436.534 177.591 li
436.765 176.133 li
436.996 174.746 li
437.226 177.128 li
437.458 176.24 li
437.689 176.809 li
437.92 178.089 li
438.151 177.555 li
438.381 170.906 li
438.613 177.698 li
438.844 176.56 li
439.075 176.88 li
439.307 175.991 li
439.537 180.969 li
439.768 175.848 li
439.999 175.208 li
440.23 177.128 li
440.461 176.204 li
440.692 176.204 li
440.923 177.164 li
441.154 176.489 li
441.385 175.564 li
441.616 177.2 li
441.848 175.778 li
442.078 175.173 li
442.309 175.707 li
442.541 175.848 li
442.772 176.417 li
443.003 175.813 li
443.233 175.6 li
443.464 176.133 li
443.695 176.56 li
443.927 177.057 li
444.158 176.204 li
444.388 175.457 li
444.619 175.529 li
444.85 176.24 li
445.082 175.28 li
445.313 180.827 li
445.543 177.982 li
445.774 176.915 li
446.006 176.666 li
446.236 178.373 li
446.468 176.24 li
446.698 175.991 li
446.93 177.982 li
447.161 175.208 li
447.392 176.951 li
447.623 175.386 li
447.853 176.133 li
448.084 175.884 li
448.316 175.778 li
448.547 176.24 li
448.778 175.244 li
449.008 176.24 li
449.24 175.564 li
449.471 177.591 li
449.702 176.596 li
449.933 175.102 li
450.164 176.987 li
450.395 176.346 li
450.626 175.6 li
450.857 176.062 li
451.089 175.955 li
451.32 175.848 li
451.55 177.627 li
451.781 176.489 li
452.013 175.422 li
452.244 176.453 li
452.475 175.742 li
452.705 176.987 li
452.936 176.062 li
453.167 176.133 li
453.399 175.848 li
453.63 176.666 li
453.861 176.809 li
454.092 176.631 li
454.323 175.529 li
454.554 176.026 li
454.785 177.022 li
455.015 175.707 li
455.247 176.666 li
455.478 175.386 li
455.709 176.204 li
455.94 176.382 li
456.171 175.386 li
456.401 171.297 li
456.633 176.204 li
456.864 176.524 li
457.096 177.128 li
457.327 176.596 li
457.557 177.128 li
457.788 174.498 li
458.019 175.813 li
458.25 177.449 li
458.482 175.991 li
458.712 176.524 li
458.943 175.386 li
459.174 176.062 li
459.405 176.666 li
459.637 176.666 li
459.867 175.493 li
460.098 176.062 li
460.329 176.489 li
460.56 172.826 li
460.792 176.56 li
461.022 175.244 li
461.253 175.244 li
461.484 177.627 li
461.716 176.88 li
461.947 177.057 li
462.177 175.6 li
462.408 177.342 li
462.639 176.346 li
462.871 177.2 li
463.102 176.275 li
463.332 176.702 li
463.563 175.6 li
463.794 176.951 li
464.025 176.275 li
464.257 175.884 li
464.487 175.707 li
464.719 176.702 li
464.95 177.591 li
465.181 176.809 li
465.412 177.733 li
465.643 173.573 li
465.873 174.817 li
466.105 176.453 li
466.336 176.56 li
466.567 174.604 li
466.798 177.164 li
467.029 177.911 li
467.26 176.24 li
467.491 181.254 li
467.722 175.564 li
467.954 175.671 li
468.184 176.062 li
468.415 176.489 li
468.646 176.204 li
468.878 176.809 li
469.109 176.382 li
469.339 177.484 li
469.57 171.83 li
469.802 176.631 li
470.033 177.022 li
470.264 176.311 li
470.494 175.813 li
470.725 175.671 li
470.956 176.915 li
471.188 175.92 li
471.419 177.698 li
471.649 175.493 li
471.881 176.56 li
472.111 176.133 li
472.343 173.751 li
472.574 173.822 li
472.805 176.169 li
473.036 177.662 li
473.267 176.417 li
473.498 176.169 li
473.729 175.742 li
473.96 176.453 li
474.191 175.813 li
474.422 176.382 li
474.653 177.022 li
474.884 175.778 li
475.115 177.449 li
475.345 176.951 li
475.577 175.955 li
475.808 176.524 li
476.039 176.382 li
476.271 175.778 li
476.501 176.204 li
476.732 176.88 li
476.963 176.489 li
477.194 175.564 li
477.426 175.991 li
477.656 174.746 li
477.887 176.346 li
478.118 176.631 li
478.349 177.342 li
478.58 181.609 li
478.811 176.596 li
479.042 175.386 li
479.274 177.164 li
479.505 177.484 li
479.736 175.671 li
479.966 177.128 li
480.197 176.702 li
480.428 176.026 li
480.66 175.137 li
480.891 176.773 li
481.122 176.346 li
481.352 176.524 li
481.583 175.386 li
481.815 175.813 li
482.046 177.804 li
482.277 177.342 li
482.507 176.737 li
482.739 175.778 li
482.97 174.995 li
483.201 176.204 li
483.432 175.778 li
483.662 176.56 li
483.894 175.707 li
484.125 176.098 li
484.356 177.2 li
484.587 176.773 li
484.818 175.848 li
485.049 175.778 li
485.28 176.133 li
485.511 178.302 li
485.743 175.955 li
485.973 178.231 li
486.204 175.671 li
486.435 169.982 li
486.667 176.951 li
486.897 176.702 li
487.128 176.809 li
487.359 175.742 li
487.591 176.311 li
487.822 174.213 li
488.053 176.453 li
488.284 176.987 li
488.514 176.026 li
488.745 174.817 li
488.977 181.716 li
489.208 175.564 li
489.439 176.773 li
489.669 176.311 li
489.9 176.026 li
490.132 174.782 li
490.363 176.169 li
490.594 175.493 li
490.825 176.311 li
491.056 175.493 li
491.287 176.204 li
491.518 176.062 li
491.749 178.444 li
491.98 176.062 li
492.211 176.098 li
492.442 175.671 li
492.673 174.924 li
492.904 174.924 li
493.134 176.524 li
493.366 176.098 li
493.597 176.098 li
493.828 177.946 li
494.06 177.555 li
494.29 159.207 li
494.521 176.24 li
494.752 177.378 li
494.983 176.702 li
495.215 175.457 li
495.445 175.422 li
495.676 176.417 li
495.907 177.413 li
496.138 176.133 li
496.369 175.92 li
496.6 175.351 li
496.831 177.057 li
497.062 177.306 li
497.293 174.959 li
497.524 175.991 li
497.756 177.982 li
497.986 175.848 li
498.217 175.848 li
498.449 175.244 li
498.68 177.555 li
498.911 176.88 li
499.141 177.093 li
499.372 177.2 li
499.604 176.987 li
499.835 176.346 li
500.066 176.311 li
500.296 176.275 li
500.528 177.52 li
500.759 176.489 li
500.99 175.92 li
501.221 176.382 li
501.452 177.484 li
501.683 178.622 li
501.914 175.208 li
502.145 176.951 li
502.376 176.915 li
502.607 177.342 li
502.838 174.889 li
503.069 176.524 li
503.3 176.631 li
503.532 175.635 li
503.763 174.106 li
503.993 175.778 li
504.224 175.493 li
504.455 175.884 li
504.687 185.698 li
504.918 176.346 li
505.148 177.342 li
505.38 174.959 li
505.611 176.631 li
505.842 177.413 li
506.073 176.24 li
506.303 176.169 li
506.535 176.275 li
506.766 176.915 li
506.997 175.884 li
507.228 176.56 li
507.458 176.702 li
507.689 176.204 li
507.921 176.666 li
508.152 176.88 li
508.383 174.319 li
508.613 176.524 li
508.845 176.524 li
509.076 177.271 li
509.307 175.28 li
509.538 176.417 li
509.769 174.782 li
510 176.56 li
510.231 176.062 li
510.462 176.133 li
510.693 177.022 li
510.923 175.635 li
511.155 176.417 li
511.386 175.635 li
511.617 175.564 li
511.848 176.24 li
512.078 176.702 li
512.31 176.098 li
512.541 177.022 li
512.772 176.382 li
513.004 175.386 li
513.234 177.342 li
513.465 177.057 li
513.696 176.915 li
513.927 171.19 li
514.158 177.235 li
514.39 175.031 li
514.62 175.884 li
514.851 176.631 li
515.082 173.857 li
515.313 176.169 li
515.545 175.707 li
515.775 175.6 li
516.006 175.707 li
516.238 174.995 li
516.469 175.848 li
516.7 176.062 li
516.93 177.093 li
517.161 178.195 li
517.393 176.702 li
517.624 180.329 li
517.855 175.493 li
518.086 175.991 li
518.317 174.568 li
518.548 176.275 li
518.779 176.275 li
519.01 175.031 li
519.241 175.671 li
519.472 176.702 li
519.703 175.386 li
519.934 177.164 li
520.166 175.813 li
520.397 176.24 li
520.627 176.311 li
520.858 175.884 li
521.089 176.56 li
521.321 175.991 li
521.552 177.093 li
521.782 176.631 li
522.013 177.2 li
522.244 176.098 li
522.476 177.057 li
522.707 177.733 li
522.937 176.915 li
523.168 177.057 li
523.399 176.133 li
523.631 177.449 li
523.862 175.315 li
524.092 176.24 li
524.323 175.529 li
524.555 175.92 li
524.786 176.773 li
525.017 176.24 li
525.247 175.884 li
525.478 177.484 li
525.71 176.702 li
525.941 177.698 li
526.172 176.133 li
526.402 176.453 li
526.633 176.844 li
526.865 176.844 li
527.096 175.28 li
527.327 177.769 li
527.557 176.88 li
527.789 176.773 li
528.02 175.991 li
528.251 177.662 li
528.482 175.884 li
528.713 176.026 li
528.944 177.342 li
529.175 176.844 li
529.406 177.876 li
529.637 177.271 li
529.868 175.813 li
530.099 175.884 li
530.33 176.204 li
530.561 175.422 li
530.792 175.671 li
531.023 177.484 li
531.254 175.6 li
531.485 176.204 li
531.716 176.524 li
531.948 178.124 li
532.179 176.915 li
532.409 177.022 li
532.64 177.128 li
532.871 176.702 li
533.102 176.275 li
533.334 175.778 li
533.564 176.56 li
533.795 175.244 li
534.026 175.28 li
534.258 176.24 li
534.489 176.382 li
534.719 176.631 li
534.95 176.382 li
535.182 175.031 li
535.413 176.204 li
535.644 177.128 li
535.875 175.848 li
536.106 176.417 li
536.337 177.342 li
536.568 175.884 li
536.799 176.524 li
537.031 176.062 li
537.261 176.987 li
537.492 176.702 li
537.723 176.453 li
537.954 175.386 li
538.185 178.018 li
538.416 176.133 li
538.647 175.813 li
538.879 176.596 li
539.11 176.773 li
539.341 175.955 li
539.571 175.671 li
539.802 175.422 li
540.033 174.959 li
540.265 177.235 li
540.496 175.244 li
540.727 176.809 li
540.957 175.564 li
541.188 176.809 li
541.419 176.417 li
541.651 174.142 li
541.881 177.164 li
542.113 176.311 li
542.344 171.368 li
542.575 176.666 li
542.806 176.311 li
543.036 175.315 li
543.267 176.098 li
543.499 177.342 li
543.73 177.84 li
543.961 176.809 li
544.192 175.848 li
544.422 176.098 li
544.653 176.915 li
544.885 173.537 li
545.116 175.6 li
545.347 174.142 li
545.577 176.311 li
545.809 177.342 li
546.04 174.711 li
546.271 177.093 li
546.502 175.92 li
546.733 176.346 li
546.964 175.386 li
547.195 176.809 li
547.426 174.498 li
547.657 176.56 li
547.888 176.311 li
548.119 175.884 li
548.35 175.742 li
548.581 175.92 li
548.812 176.666 li
549.042 176.382 li
549.274 178.195 li
549.505 175.066 li
549.737 177.413 li
549.968 175.315 li
550.198 176.382 li
550.429 175.6 li
550.66 177.306 li
550.891 177.022 li
551.123 175.564 li
551.354 176.631 li
551.584 176.169 li
551.815 176.24 li
552.047 175.493 li
552.278 176.133 li
552.509 176.987 li
552.739 176.844 li
552.971 176.382 li
553.202 177.235 li
553.433 176.596 li
553.664 175.813 li
553.895 176.666 li
554.126 176.026 li
554.357 175.28 li
554.588 176.809 li
554.82 176.631 li
555.05 176.026 li
555.281 175.244 li
555.512 174.889 li
555.743 176.133 li
555.974 177.449 li
556.205 176.773 li
556.436 175.208 li
556.667 176.275 li
556.898 175.92 li
557.13 176.666 li
557.361 175.742 li
557.591 177.164 li
557.822 177.52 li
558.054 174.533 li
558.285 175.564 li
558.516 175.493 li
558.746 176.453 li
558.977 175.955 li
559.209 176.382 li
559.44 176.951 li
559.671 175.813 li
559.901 175.813 li
560.132 176.133 li
560.363 177.591 li
560.578 176.569 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
388.689 154.769 mo
551.974 154.769 li
551.974 111.411 li
388.689 111.411 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
388.689 154.769 mo
551.975 154.769 li
1 /0 /CSD get_res sepcs
.851074 sep
5.00561 lw
2 lc
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
388.689 111.411 mo
551.975 111.411 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
402.527 154.769 mo
402.527 153.133 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
456.955 154.769 mo
456.955 153.133 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
511.383 154.769 mo
511.383 153.133 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
402.527 111.411 mo
402.527 113.046 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
456.955 111.411 mo
456.955 113.046 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
511.383 111.411 mo
511.383 113.046 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DWBJAN+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DWBJAN+Helvetica /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/DWBJAN+Helvetica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero 
/one /two /.notdef /four /.notdef /six /seven /eight 
8{/.notdef}rp /A 18{/.notdef}rp /T 15{/.notdef}rp /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m 2{/.notdef}rp /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [9.9998 0 0 -10.0166 0 0 ]msf
389.884 169.079 mo
(0.068)sh
444.313 169.079 mo
(0.072)sh
498.741 169.079 mo
(0.076)sh
388.689 154.769 mo
388.689 111.411 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
551.975 154.769 mo
551.975 111.411 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
388.689 142.457 mo
390.322 142.457 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
388.689 129.791 mo
390.322 129.791 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
388.689 117.126 mo
390.322 117.126 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
551.975 142.457 mo
550.341 142.457 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
551.975 129.791 mo
550.341 129.791 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
551.975 117.126 mo
550.341 117.126 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
DWBJAN+Helvetica*1 [9.9998 0 0 -10.0166 0 0 ]msf
379.119 146.32 mo
(0)sh
379.119 133.654 mo
(4)sh
379.119 120.989 mo
(8)sh
390.137 108.553 mo
390.137 108.5 390.155 108.453 390.19 108.413 cv
392.239 106.367 li
390.19 104.314 li
390.155 104.283 390.137 104.238 390.137 104.18 cv
390.137 104.135 390.157 104.092 390.197 104.05 cv
390.237 104.007 390.284 103.985 390.338 103.985 cv
390.382 103.985 390.431 104.006 390.485 104.046 cv
392.527 106.092 li
394.556 104.046 li
394.61 104.006 394.659 103.985 394.704 103.985 cv
394.757 103.985 394.803 104.005 394.841 104.042 cv
394.879 104.081 394.898 104.126 394.898 104.18 cv
394.898 104.238 394.882 104.283 394.851 104.314 cv
392.802 106.367 li
394.851 108.413 li
394.882 108.453 394.898 108.5 394.898 108.553 cv
394.898 108.607 394.879 108.653 394.841 108.691 cv
394.803 108.729 394.757 108.748 394.704 108.748 cv
394.655 108.748 394.605 108.723 394.556 108.674 cv
392.527 106.642 li
390.485 108.674 li
390.436 108.723 390.387 108.748 390.338 108.748 cv
390.284 108.748 390.237 108.727 390.197 108.684 cv
390.157 108.642 390.137 108.598 390.137 108.553 cv
f
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DWBJAN+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DWBJAN+Helvetica /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/DWBJAN+Helvetica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero 
/one /two /three /four /.notdef /six /seven /eight 
8{/.notdef}rp /A 18{/.notdef}rp /T 15{/.notdef}rp /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m 2{/.notdef}rp /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [9.9998 0 0 -10.0166 0 0 ]msf
396.833 108.835 mo
(10)
[5.55988 0 ]xsh
DWBJAN+Helvetica*1 [8.00012 0 0 -8.01356 0 0 ]msf
407.976 104.113 mo
(-3)
[2.66397 0 ]xsh
388.67 141.408 mo
388.919 140.814 li
389.769 141.78 li
390.62 143.906 li
391.47 143.327 li
392.321 143.906 li
393.171 143.809 li
394.022 144.872 li
394.872 144.776 li
395.722 144.292 li
396.573 141.876 li
397.424 140.62 li
398.274 145.646 li
399.124 144.099 li
399.975 141.973 li
400.825 142.36 li
401.676 145.065 li
402.527 140.717 li
403.377 141.007 li
404.227 146.515 li
405.077 138.397 li
405.928 140.523 li
406.779 145.259 li
407.629 140.427 li
408.48 142.746 li
409.33 143.133 li
410.18 143.52 li
411.03 146.322 li
411.881 139.46 li
412.731 139.074 li
413.582 138.011 li
414.433 142.167 li
415.283 145.452 li
416.133 145.355 li
416.983 142.264 li
417.835 142.167 li
418.685 143.52 li
419.534 139.364 li
420.385 140.427 li
421.236 144.292 li
422.086 146.515 li
422.936 144.969 li
423.787 151.83 li
424.638 143.906 li
424.781 111.406 li
.875212 .526787 .00390631 .000823987 cmyk
20.0182 lw
0 lc
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
426.207 111.406 mo
426.339 140.814 li
427.189 142.36 li
428.039 144.872 li
428.889 141.297 li
429.741 140.427 li
430.591 141.587 li
431.441 143.906 li
432.292 145.935 li
433.142 141.587 li
433.992 141.2 li
434.843 144.099 li
435.694 142.553 li
436.544 147.385 li
437.394 145.355 li
438.245 145.259 li
439.095 140.911 li
439.946 143.036 li
440.796 153.182 li
441.647 144.969 li
442.497 138.688 li
443.347 144.099 li
444.198 142.071 li
445.049 140.234 li
445.899 143.713 li
446.749 145.548 li
447.6 139.557 li
448.45 140.62 li
449.301 143.133 li
450.152 144.583 li
451.001 143.52 li
451.852 149.704 li
452.702 144.486 li
453.553 142.071 li
454.403 143.327 li
455.253 145.839 li
456.105 142.071 li
456.955 144.583 li
457.805 143.133 li
458.655 140.62 li
459.506 143.52 li
460.356 145.162 li
461.207 146.998 li
462.057 142.65 li
462.908 135.017 li
463.758 142.553 li
464.608 144.196 li
465.459 138.592 li
466.309 140.137 li
467.16 141.78 li
468.011 144.969 li
468.861 144.39 li
469.711 142.36 li
470.561 115.11 li
471.412 140.911 li
472.263 146.902 li
473.113 140.62 li
473.964 142.167 li
474.814 142.843 li
475.664 143.036 li
476.514 139.46 li
477.366 144.002 li
478.216 141.587 li
479.066 143.616 li
479.917 142.65 li
480.767 139.074 li
481.617 142.746 li
482.468 146.611 li
483.318 142.65 li
484.169 146.322 li
485.019 141.297 li
485.87 144.39 li
486.72 138.592 li
487.57 143.327 li
488.421 144.583 li
489.272 140.523 li
490.122 142.746 li
490.972 141.2 li
491.823 141.394 li
492.674 146.611 li
493.523 143.327 li
494.373 141.587 li
495.225 143.23 li
496.075 142.457 li
496.926 141.973 li
497.776 139.46 li
498.626 143.133 li
499.477 146.515 li
500.327 141.394 li
501.178 136.948 li
502.028 141.78 li
502.878 144.679 li
503.729 143.133 li
504.579 143.713 li
505.43 142.553 li
506.28 140.717 li
507.131 142.65 li
507.981 145.935 li
508.831 141.78 li
509.682 140.427 li
510.533 141.49 li
511.383 141.007 li
512.233 141.587 li
513.084 142.457 li
513.934 142.65 li
514.784 137.239 li
515.636 139.074 li
516.486 141.587 li
517.336 144.292 li
518.186 140.911 li
519.037 150.284 li
519.888 144.583 li
520.738 142.457 li
521.589 143.23 li
522.439 140.62 li
523.289 141.683 li
524.139 142.071 li
524.991 147.288 li
525.84 141.78 li
526.691 142.071 li
527.542 140.717 li
528.392 142.071 li
529.242 146.128 li
530.092 144.776 li
530.943 140.911 li
531.794 143.327 li
532.644 143.133 li
533.495 144.196 li
534.345 143.52 li
535.195 144.486 li
536.045 140.234 li
536.896 141.973 li
537.747 142.553 li
538.597 142.457 li
539.448 141.49 li
540.298 144.679 li
541.148 136.562 li
541.998 146.225 li
542.85 144.39 li
543.7 145.742 li
544.55 142.457 li
545.401 139.171 li
546.251 138.688 li
547.101 142.36 li
547.952 140.331 li
548.803 139.268 li
549.653 139.074 li
550.503 145.935 li
551.354 143.809 li
551.994 142.718 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
294.121 87.6999 mo
321.489 99.719 li
1 /0 /CSD get_res sepcs
1 sep
10.0069 lw
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
319.789 94.871 mo
327.443 102.333 li
321.489 99.719 li
319.789 94.871 li
5.00561 lw
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
327.443 102.333 mo
316.778 101.752 li
321.489 99.719 li
327.443 102.333 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
327.442 102.333 mo
319.789 94.8711 li
321.488 99.7191 li
316.777 101.751 li
cp
f
309.041 64.2463 mo
308.768 60.9535 li
307.951 57.6837 li
306.597 54.461 li
304.714 51.3084 li
302.317 48.2498 li
299.422 45.3064 li
296.051 42.499 li
292.228 39.8488 li
287.98 37.3737 li
283.339 35.0928 li
278.336 33.022 li
273.009 31.1755 li
267.396 29.5682 li
261.538 28.21 li
255.475 27.1121 li
249.253 26.2814 li
242.917 25.7249 li
236.51 25.4447 li
230.08 25.4447 li
223.675 25.7249 li
217.337 26.2814 li
211.115 27.1121 li
205.053 28.21 li
199.194 29.5682 li
193.582 31.1755 li
188.255 33.022 li
183.253 35.0928 li
178.611 37.3737 li
174.363 39.8488 li
170.539 42.499 li
167.168 45.3064 li
164.275 48.2498 li
161.877 51.3084 li
159.994 54.461 li
158.639 57.6837 li
157.823 60.9535 li
157.55 64.2463 li
157.823 67.541 li
158.639 70.8108 li
159.994 74.0325 li
161.877 77.1851 li
164.275 80.2437 li
167.168 83.1872 li
170.539 85.9945 li
174.363 88.6447 li
178.611 91.1198 li
183.253 93.4007 li
188.255 95.4715 li
193.582 97.317 li
199.194 98.9254 li
205.053 100.283 li
211.115 101.381 li
217.337 102.212 li
223.675 102.769 li
230.08 103.049 li
236.51 103.049 li
242.917 102.769 li
249.253 102.212 li
255.475 101.381 li
261.538 100.283 li
267.396 98.9254 li
273.009 97.317 li
278.336 95.4715 li
283.339 93.4007 li
287.98 91.1198 li
292.228 88.6447 li
296.051 85.9945 li
299.422 83.1872 li
302.317 80.2437 li
304.714 77.1851 li
306.597 74.0325 li
307.951 70.8108 li
308.768 67.541 li
309.041 64.2463 li
cp
0 .729488 .759487 0 cmyk
15.0126 lw
2 lj
[12.8679 12.8679 ] 0 dsh
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
347.335 175.13 mo
347.267 174.111 li
347.064 173.1 li
346.728 172.104 li
346.261 171.129 li
345.665 170.183 li
344.947 169.273 li
344.111 168.405 li
343.161 167.586 li
342.107 166.821 li
340.955 166.116 li
339.713 165.475 li
338.391 164.905 li
336.998 164.407 li
335.544 163.988 li
334.039 163.648 li
332.494 163.391 li
330.922 163.219 li
329.332 163.132 li
327.735 163.132 li
326.146 163.219 li
324.572 163.391 li
323.027 163.648 li
321.523 163.988 li
320.069 164.407 li
318.676 164.905 li
317.353 165.475 li
316.112 166.116 li
314.959 166.821 li
313.905 167.586 li
312.956 168.405 li
312.119 169.273 li
311.401 170.183 li
310.807 171.129 li
310.339 172.104 li
310.002 173.1 li
309.8 174.111 li
309.732 175.13 li
309.8 176.148 li
310.002 177.159 li
310.339 178.155 li
310.807 179.13 li
311.401 180.075 li
312.119 180.985 li
312.956 181.853 li
313.905 182.673 li
314.959 183.438 li
316.112 184.143 li
317.353 184.783 li
318.676 185.354 li
320.069 185.851 li
321.523 186.271 li
323.027 186.61 li
324.572 186.867 li
326.146 187.04 li
327.735 187.126 li
329.332 187.126 li
330.922 187.04 li
332.494 186.867 li
334.039 186.61 li
335.544 186.271 li
336.998 185.851 li
338.391 185.354 li
339.713 184.783 li
340.955 184.143 li
342.107 183.438 li
343.161 182.673 li
344.111 181.853 li
344.947 180.985 li
345.665 180.075 li
346.261 179.13 li
346.728 178.155 li
347.064 177.159 li
347.267 176.148 li
347.335 175.13 li
cp
0 .726284 .762173 0 cmyk
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
347.335 171.258 mo
375.911 156.046 li
1 /0 /CSD get_res sepcs
1 sep
10.0069 lw
1 lj
[] 0 dsh
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
371.06 154.374 mo
381.65 152.991 li
375.911 156.046 li
371.06 154.374 li
5.00561 lw
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
381.65 152.991 mo
374.58 161.008 li
375.911 156.046 li
381.65 152.991 li
gsave
[.0999161 0 0 .100084 -51.0236 247.496 ]ct
@
grestore newpath
381.65 152.991 mo
371.06 154.374 li
375.91 156.046 li
374.58 161.008 li
cp
f
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DWBJAN+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/z <1C60D8A8C9B7A73DC507CAD0E5DFE643D31A4E6B11FABD4208D503774320
4B31FEF10DBD97DC6225A0AD01031FB41D73CCE7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DWBJAN+Helvetica /Encoding get
dup 32 /space put
dup 110 /n put
dup 111 /o put
dup 122 /z put
pop
%ADOEndSubsetFont
/DWBJAN+Helvetica*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /three /four /.notdef /six 
/seven /eight 8{/.notdef}rp /A 18{/.notdef}rp /T 15{/.notdef}rp /d 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
/p 2{/.notdef}rp /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]
DWBJAN+Helvetica nf
DWBJAN+Helvetica*1 [11.0001 0 0 -11.0186 0 0 ]msf
327.912 159.357 mo
(zoom in)sh
313.395 93.3207 mo
(zoom in)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/DWBJAN+Helvetica*1 uf
/DWBJAN+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
